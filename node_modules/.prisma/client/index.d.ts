
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model HealthAnalysis
 * 
 */
export type HealthAnalysis = $Result.DefaultSelection<Prisma.$HealthAnalysisPayload>
/**
 * Model MonitoringJob
 * 
 */
export type MonitoringJob = $Result.DefaultSelection<Prisma.$MonitoringJobPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Patients
 * const patients = await prisma.patient.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Patients
   * const patients = await prisma.patient.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.healthAnalysis`: Exposes CRUD operations for the **HealthAnalysis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HealthAnalyses
    * const healthAnalyses = await prisma.healthAnalysis.findMany()
    * ```
    */
  get healthAnalysis(): Prisma.HealthAnalysisDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.monitoringJob`: Exposes CRUD operations for the **MonitoringJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MonitoringJobs
    * const monitoringJobs = await prisma.monitoringJob.findMany()
    * ```
    */
  get monitoringJob(): Prisma.MonitoringJobDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Patient: 'Patient',
    Message: 'Message',
    HealthAnalysis: 'HealthAnalysis',
    MonitoringJob: 'MonitoringJob'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "patient" | "message" | "healthAnalysis" | "monitoringJob"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      HealthAnalysis: {
        payload: Prisma.$HealthAnalysisPayload<ExtArgs>
        fields: Prisma.HealthAnalysisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HealthAnalysisFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HealthAnalysisFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload>
          }
          findFirst: {
            args: Prisma.HealthAnalysisFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HealthAnalysisFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload>
          }
          findMany: {
            args: Prisma.HealthAnalysisFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload>[]
          }
          create: {
            args: Prisma.HealthAnalysisCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload>
          }
          createMany: {
            args: Prisma.HealthAnalysisCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HealthAnalysisCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload>[]
          }
          delete: {
            args: Prisma.HealthAnalysisDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload>
          }
          update: {
            args: Prisma.HealthAnalysisUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload>
          }
          deleteMany: {
            args: Prisma.HealthAnalysisDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HealthAnalysisUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HealthAnalysisUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload>[]
          }
          upsert: {
            args: Prisma.HealthAnalysisUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HealthAnalysisPayload>
          }
          aggregate: {
            args: Prisma.HealthAnalysisAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHealthAnalysis>
          }
          groupBy: {
            args: Prisma.HealthAnalysisGroupByArgs<ExtArgs>
            result: $Utils.Optional<HealthAnalysisGroupByOutputType>[]
          }
          count: {
            args: Prisma.HealthAnalysisCountArgs<ExtArgs>
            result: $Utils.Optional<HealthAnalysisCountAggregateOutputType> | number
          }
        }
      }
      MonitoringJob: {
        payload: Prisma.$MonitoringJobPayload<ExtArgs>
        fields: Prisma.MonitoringJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MonitoringJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MonitoringJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload>
          }
          findFirst: {
            args: Prisma.MonitoringJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MonitoringJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload>
          }
          findMany: {
            args: Prisma.MonitoringJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload>[]
          }
          create: {
            args: Prisma.MonitoringJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload>
          }
          createMany: {
            args: Prisma.MonitoringJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MonitoringJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload>[]
          }
          delete: {
            args: Prisma.MonitoringJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload>
          }
          update: {
            args: Prisma.MonitoringJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload>
          }
          deleteMany: {
            args: Prisma.MonitoringJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MonitoringJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MonitoringJobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload>[]
          }
          upsert: {
            args: Prisma.MonitoringJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MonitoringJobPayload>
          }
          aggregate: {
            args: Prisma.MonitoringJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMonitoringJob>
          }
          groupBy: {
            args: Prisma.MonitoringJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<MonitoringJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.MonitoringJobCountArgs<ExtArgs>
            result: $Utils.Optional<MonitoringJobCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    patient?: PatientOmit
    message?: MessageOmit
    healthAnalysis?: HealthAnalysisOmit
    monitoringJob?: MonitoringJobOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    messages: number
    healthAnalyses: number
    monitoringJobs: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | PatientCountOutputTypeCountMessagesArgs
    healthAnalyses?: boolean | PatientCountOutputTypeCountHealthAnalysesArgs
    monitoringJobs?: boolean | PatientCountOutputTypeCountMonitoringJobsArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountHealthAnalysesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HealthAnalysisWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMonitoringJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonitoringJobWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    id: number | null
    age: number | null
    lastMonitoringInterval: number | null
    lastWeatherTemp: number | null
    lastWeatherHumidity: number | null
    confidenceScore: number | null
  }

  export type PatientSumAggregateOutputType = {
    id: number | null
    age: number | null
    lastMonitoringInterval: number | null
    lastWeatherTemp: number | null
    lastWeatherHumidity: number | null
    confidenceScore: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    phoneNumber: string | null
    zipcode: string | null
    age: number | null
    optOutCustomMessages: boolean | null
    consentGiven: boolean | null
    consentDate: Date | null
    familyContactName: string | null
    familyContactPhone: string | null
    familyContactRelation: string | null
    familyContactConsent: boolean | null
    healthcareProviderName: string | null
    healthcareProviderHospital: string | null
    healthcareProviderPhone: string | null
    healthcareProviderConsent: boolean | null
    hospital: string | null
    dialysisSchedule: string | null
    smoker: boolean | null
    isPregnant: boolean | null
    activityLevel: string | null
    riskLevel: string | null
    monitoringEnabled: boolean | null
    preferredLanguage: string | null
    registrationComplete: boolean | null
    lastHealthCheck: Date | null
    lastRiskLevel: string | null
    lastUrgency: string | null
    lastEscalationLevel: string | null
    lastMonitoringInterval: number | null
    lastSymptomText: string | null
    lastAnalysisTimestamp: Date | null
    lastWeatherTemp: number | null
    lastWeatherHumidity: number | null
    confidenceScore: number | null
    emergencyAlerted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    phoneNumber: string | null
    zipcode: string | null
    age: number | null
    optOutCustomMessages: boolean | null
    consentGiven: boolean | null
    consentDate: Date | null
    familyContactName: string | null
    familyContactPhone: string | null
    familyContactRelation: string | null
    familyContactConsent: boolean | null
    healthcareProviderName: string | null
    healthcareProviderHospital: string | null
    healthcareProviderPhone: string | null
    healthcareProviderConsent: boolean | null
    hospital: string | null
    dialysisSchedule: string | null
    smoker: boolean | null
    isPregnant: boolean | null
    activityLevel: string | null
    riskLevel: string | null
    monitoringEnabled: boolean | null
    preferredLanguage: string | null
    registrationComplete: boolean | null
    lastHealthCheck: Date | null
    lastRiskLevel: string | null
    lastUrgency: string | null
    lastEscalationLevel: string | null
    lastMonitoringInterval: number | null
    lastSymptomText: string | null
    lastAnalysisTimestamp: Date | null
    lastWeatherTemp: number | null
    lastWeatherHumidity: number | null
    confidenceScore: number | null
    emergencyAlerted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    firstName: number
    phoneNumber: number
    zipcode: number
    age: number
    optOutCustomMessages: number
    consentGiven: number
    consentDate: number
    familyContactName: number
    familyContactPhone: number
    familyContactRelation: number
    familyContactConsent: number
    healthcareProviderName: number
    healthcareProviderHospital: number
    healthcareProviderPhone: number
    healthcareProviderConsent: number
    medications: number
    preExistingConditions: number
    chronicConditions: number
    hospital: number
    dialysisSchedule: number
    smoker: number
    isPregnant: number
    activityLevel: number
    riskLevel: number
    monitoringEnabled: number
    preferredLanguage: number
    registrationComplete: number
    lastHealthCheck: number
    lastRiskLevel: number
    lastUrgency: number
    lastEscalationLevel: number
    lastMonitoringInterval: number
    lastSymptomText: number
    lastAnalysisTimestamp: number
    lastWeatherTemp: number
    lastWeatherHumidity: number
    confidenceScore: number
    emergencyAlerted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    id?: true
    age?: true
    lastMonitoringInterval?: true
    lastWeatherTemp?: true
    lastWeatherHumidity?: true
    confidenceScore?: true
  }

  export type PatientSumAggregateInputType = {
    id?: true
    age?: true
    lastMonitoringInterval?: true
    lastWeatherTemp?: true
    lastWeatherHumidity?: true
    confidenceScore?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    firstName?: true
    phoneNumber?: true
    zipcode?: true
    age?: true
    optOutCustomMessages?: true
    consentGiven?: true
    consentDate?: true
    familyContactName?: true
    familyContactPhone?: true
    familyContactRelation?: true
    familyContactConsent?: true
    healthcareProviderName?: true
    healthcareProviderHospital?: true
    healthcareProviderPhone?: true
    healthcareProviderConsent?: true
    hospital?: true
    dialysisSchedule?: true
    smoker?: true
    isPregnant?: true
    activityLevel?: true
    riskLevel?: true
    monitoringEnabled?: true
    preferredLanguage?: true
    registrationComplete?: true
    lastHealthCheck?: true
    lastRiskLevel?: true
    lastUrgency?: true
    lastEscalationLevel?: true
    lastMonitoringInterval?: true
    lastSymptomText?: true
    lastAnalysisTimestamp?: true
    lastWeatherTemp?: true
    lastWeatherHumidity?: true
    confidenceScore?: true
    emergencyAlerted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    firstName?: true
    phoneNumber?: true
    zipcode?: true
    age?: true
    optOutCustomMessages?: true
    consentGiven?: true
    consentDate?: true
    familyContactName?: true
    familyContactPhone?: true
    familyContactRelation?: true
    familyContactConsent?: true
    healthcareProviderName?: true
    healthcareProviderHospital?: true
    healthcareProviderPhone?: true
    healthcareProviderConsent?: true
    hospital?: true
    dialysisSchedule?: true
    smoker?: true
    isPregnant?: true
    activityLevel?: true
    riskLevel?: true
    monitoringEnabled?: true
    preferredLanguage?: true
    registrationComplete?: true
    lastHealthCheck?: true
    lastRiskLevel?: true
    lastUrgency?: true
    lastEscalationLevel?: true
    lastMonitoringInterval?: true
    lastSymptomText?: true
    lastAnalysisTimestamp?: true
    lastWeatherTemp?: true
    lastWeatherHumidity?: true
    confidenceScore?: true
    emergencyAlerted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    firstName?: true
    phoneNumber?: true
    zipcode?: true
    age?: true
    optOutCustomMessages?: true
    consentGiven?: true
    consentDate?: true
    familyContactName?: true
    familyContactPhone?: true
    familyContactRelation?: true
    familyContactConsent?: true
    healthcareProviderName?: true
    healthcareProviderHospital?: true
    healthcareProviderPhone?: true
    healthcareProviderConsent?: true
    medications?: true
    preExistingConditions?: true
    chronicConditions?: true
    hospital?: true
    dialysisSchedule?: true
    smoker?: true
    isPregnant?: true
    activityLevel?: true
    riskLevel?: true
    monitoringEnabled?: true
    preferredLanguage?: true
    registrationComplete?: true
    lastHealthCheck?: true
    lastRiskLevel?: true
    lastUrgency?: true
    lastEscalationLevel?: true
    lastMonitoringInterval?: true
    lastSymptomText?: true
    lastAnalysisTimestamp?: true
    lastWeatherTemp?: true
    lastWeatherHumidity?: true
    confidenceScore?: true
    emergencyAlerted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: number
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages: boolean
    consentGiven: boolean
    consentDate: Date | null
    familyContactName: string | null
    familyContactPhone: string | null
    familyContactRelation: string | null
    familyContactConsent: boolean
    healthcareProviderName: string | null
    healthcareProviderHospital: string | null
    healthcareProviderPhone: string | null
    healthcareProviderConsent: boolean
    medications: JsonValue | null
    preExistingConditions: JsonValue | null
    chronicConditions: JsonValue | null
    hospital: string | null
    dialysisSchedule: string | null
    smoker: boolean
    isPregnant: boolean
    activityLevel: string
    riskLevel: string
    monitoringEnabled: boolean
    preferredLanguage: string
    registrationComplete: boolean
    lastHealthCheck: Date | null
    lastRiskLevel: string | null
    lastUrgency: string | null
    lastEscalationLevel: string | null
    lastMonitoringInterval: number | null
    lastSymptomText: string | null
    lastAnalysisTimestamp: Date | null
    lastWeatherTemp: number | null
    lastWeatherHumidity: number | null
    confidenceScore: number | null
    emergencyAlerted: boolean
    createdAt: Date
    updatedAt: Date
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    phoneNumber?: boolean
    zipcode?: boolean
    age?: boolean
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: boolean
    familyContactName?: boolean
    familyContactPhone?: boolean
    familyContactRelation?: boolean
    familyContactConsent?: boolean
    healthcareProviderName?: boolean
    healthcareProviderHospital?: boolean
    healthcareProviderPhone?: boolean
    healthcareProviderConsent?: boolean
    medications?: boolean
    preExistingConditions?: boolean
    chronicConditions?: boolean
    hospital?: boolean
    dialysisSchedule?: boolean
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: boolean
    riskLevel?: boolean
    monitoringEnabled?: boolean
    preferredLanguage?: boolean
    registrationComplete?: boolean
    lastHealthCheck?: boolean
    lastRiskLevel?: boolean
    lastUrgency?: boolean
    lastEscalationLevel?: boolean
    lastMonitoringInterval?: boolean
    lastSymptomText?: boolean
    lastAnalysisTimestamp?: boolean
    lastWeatherTemp?: boolean
    lastWeatherHumidity?: boolean
    confidenceScore?: boolean
    emergencyAlerted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messages?: boolean | Patient$messagesArgs<ExtArgs>
    healthAnalyses?: boolean | Patient$healthAnalysesArgs<ExtArgs>
    monitoringJobs?: boolean | Patient$monitoringJobsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    phoneNumber?: boolean
    zipcode?: boolean
    age?: boolean
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: boolean
    familyContactName?: boolean
    familyContactPhone?: boolean
    familyContactRelation?: boolean
    familyContactConsent?: boolean
    healthcareProviderName?: boolean
    healthcareProviderHospital?: boolean
    healthcareProviderPhone?: boolean
    healthcareProviderConsent?: boolean
    medications?: boolean
    preExistingConditions?: boolean
    chronicConditions?: boolean
    hospital?: boolean
    dialysisSchedule?: boolean
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: boolean
    riskLevel?: boolean
    monitoringEnabled?: boolean
    preferredLanguage?: boolean
    registrationComplete?: boolean
    lastHealthCheck?: boolean
    lastRiskLevel?: boolean
    lastUrgency?: boolean
    lastEscalationLevel?: boolean
    lastMonitoringInterval?: boolean
    lastSymptomText?: boolean
    lastAnalysisTimestamp?: boolean
    lastWeatherTemp?: boolean
    lastWeatherHumidity?: boolean
    confidenceScore?: boolean
    emergencyAlerted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    phoneNumber?: boolean
    zipcode?: boolean
    age?: boolean
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: boolean
    familyContactName?: boolean
    familyContactPhone?: boolean
    familyContactRelation?: boolean
    familyContactConsent?: boolean
    healthcareProviderName?: boolean
    healthcareProviderHospital?: boolean
    healthcareProviderPhone?: boolean
    healthcareProviderConsent?: boolean
    medications?: boolean
    preExistingConditions?: boolean
    chronicConditions?: boolean
    hospital?: boolean
    dialysisSchedule?: boolean
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: boolean
    riskLevel?: boolean
    monitoringEnabled?: boolean
    preferredLanguage?: boolean
    registrationComplete?: boolean
    lastHealthCheck?: boolean
    lastRiskLevel?: boolean
    lastUrgency?: boolean
    lastEscalationLevel?: boolean
    lastMonitoringInterval?: boolean
    lastSymptomText?: boolean
    lastAnalysisTimestamp?: boolean
    lastWeatherTemp?: boolean
    lastWeatherHumidity?: boolean
    confidenceScore?: boolean
    emergencyAlerted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    firstName?: boolean
    phoneNumber?: boolean
    zipcode?: boolean
    age?: boolean
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: boolean
    familyContactName?: boolean
    familyContactPhone?: boolean
    familyContactRelation?: boolean
    familyContactConsent?: boolean
    healthcareProviderName?: boolean
    healthcareProviderHospital?: boolean
    healthcareProviderPhone?: boolean
    healthcareProviderConsent?: boolean
    medications?: boolean
    preExistingConditions?: boolean
    chronicConditions?: boolean
    hospital?: boolean
    dialysisSchedule?: boolean
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: boolean
    riskLevel?: boolean
    monitoringEnabled?: boolean
    preferredLanguage?: boolean
    registrationComplete?: boolean
    lastHealthCheck?: boolean
    lastRiskLevel?: boolean
    lastUrgency?: boolean
    lastEscalationLevel?: boolean
    lastMonitoringInterval?: boolean
    lastSymptomText?: boolean
    lastAnalysisTimestamp?: boolean
    lastWeatherTemp?: boolean
    lastWeatherHumidity?: boolean
    confidenceScore?: boolean
    emergencyAlerted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "phoneNumber" | "zipcode" | "age" | "optOutCustomMessages" | "consentGiven" | "consentDate" | "familyContactName" | "familyContactPhone" | "familyContactRelation" | "familyContactConsent" | "healthcareProviderName" | "healthcareProviderHospital" | "healthcareProviderPhone" | "healthcareProviderConsent" | "medications" | "preExistingConditions" | "chronicConditions" | "hospital" | "dialysisSchedule" | "smoker" | "isPregnant" | "activityLevel" | "riskLevel" | "monitoringEnabled" | "preferredLanguage" | "registrationComplete" | "lastHealthCheck" | "lastRiskLevel" | "lastUrgency" | "lastEscalationLevel" | "lastMonitoringInterval" | "lastSymptomText" | "lastAnalysisTimestamp" | "lastWeatherTemp" | "lastWeatherHumidity" | "confidenceScore" | "emergencyAlerted" | "createdAt" | "updatedAt", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | Patient$messagesArgs<ExtArgs>
    healthAnalyses?: boolean | Patient$healthAnalysesArgs<ExtArgs>
    monitoringJobs?: boolean | Patient$monitoringJobsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PatientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      messages: Prisma.$MessagePayload<ExtArgs>[]
      healthAnalyses: Prisma.$HealthAnalysisPayload<ExtArgs>[]
      monitoringJobs: Prisma.$MonitoringJobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      phoneNumber: string
      zipcode: string
      age: number
      optOutCustomMessages: boolean
      consentGiven: boolean
      consentDate: Date | null
      familyContactName: string | null
      familyContactPhone: string | null
      familyContactRelation: string | null
      familyContactConsent: boolean
      healthcareProviderName: string | null
      healthcareProviderHospital: string | null
      healthcareProviderPhone: string | null
      healthcareProviderConsent: boolean
      medications: Prisma.JsonValue | null
      preExistingConditions: Prisma.JsonValue | null
      chronicConditions: Prisma.JsonValue | null
      hospital: string | null
      dialysisSchedule: string | null
      smoker: boolean
      isPregnant: boolean
      activityLevel: string
      riskLevel: string
      monitoringEnabled: boolean
      preferredLanguage: string
      registrationComplete: boolean
      lastHealthCheck: Date | null
      lastRiskLevel: string | null
      lastUrgency: string | null
      lastEscalationLevel: string | null
      lastMonitoringInterval: number | null
      lastSymptomText: string | null
      lastAnalysisTimestamp: Date | null
      lastWeatherTemp: number | null
      lastWeatherHumidity: number | null
      confidenceScore: number | null
      emergencyAlerted: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients and returns the data updated in the database.
     * @param {PatientUpdateManyAndReturnArgs} args - Arguments to update many Patients.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    messages<T extends Patient$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    healthAnalyses<T extends Patient$healthAnalysesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$healthAnalysesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    monitoringJobs<T extends Patient$monitoringJobsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$monitoringJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'Int'>
    readonly firstName: FieldRef<"Patient", 'String'>
    readonly phoneNumber: FieldRef<"Patient", 'String'>
    readonly zipcode: FieldRef<"Patient", 'String'>
    readonly age: FieldRef<"Patient", 'Int'>
    readonly optOutCustomMessages: FieldRef<"Patient", 'Boolean'>
    readonly consentGiven: FieldRef<"Patient", 'Boolean'>
    readonly consentDate: FieldRef<"Patient", 'DateTime'>
    readonly familyContactName: FieldRef<"Patient", 'String'>
    readonly familyContactPhone: FieldRef<"Patient", 'String'>
    readonly familyContactRelation: FieldRef<"Patient", 'String'>
    readonly familyContactConsent: FieldRef<"Patient", 'Boolean'>
    readonly healthcareProviderName: FieldRef<"Patient", 'String'>
    readonly healthcareProviderHospital: FieldRef<"Patient", 'String'>
    readonly healthcareProviderPhone: FieldRef<"Patient", 'String'>
    readonly healthcareProviderConsent: FieldRef<"Patient", 'Boolean'>
    readonly medications: FieldRef<"Patient", 'Json'>
    readonly preExistingConditions: FieldRef<"Patient", 'Json'>
    readonly chronicConditions: FieldRef<"Patient", 'Json'>
    readonly hospital: FieldRef<"Patient", 'String'>
    readonly dialysisSchedule: FieldRef<"Patient", 'String'>
    readonly smoker: FieldRef<"Patient", 'Boolean'>
    readonly isPregnant: FieldRef<"Patient", 'Boolean'>
    readonly activityLevel: FieldRef<"Patient", 'String'>
    readonly riskLevel: FieldRef<"Patient", 'String'>
    readonly monitoringEnabled: FieldRef<"Patient", 'Boolean'>
    readonly preferredLanguage: FieldRef<"Patient", 'String'>
    readonly registrationComplete: FieldRef<"Patient", 'Boolean'>
    readonly lastHealthCheck: FieldRef<"Patient", 'DateTime'>
    readonly lastRiskLevel: FieldRef<"Patient", 'String'>
    readonly lastUrgency: FieldRef<"Patient", 'String'>
    readonly lastEscalationLevel: FieldRef<"Patient", 'String'>
    readonly lastMonitoringInterval: FieldRef<"Patient", 'Int'>
    readonly lastSymptomText: FieldRef<"Patient", 'String'>
    readonly lastAnalysisTimestamp: FieldRef<"Patient", 'DateTime'>
    readonly lastWeatherTemp: FieldRef<"Patient", 'Float'>
    readonly lastWeatherHumidity: FieldRef<"Patient", 'Float'>
    readonly confidenceScore: FieldRef<"Patient", 'Float'>
    readonly emergencyAlerted: FieldRef<"Patient", 'Boolean'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient updateManyAndReturn
   */
  export type PatientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient.messages
   */
  export type Patient$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Patient.healthAnalyses
   */
  export type Patient$healthAnalysesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    where?: HealthAnalysisWhereInput
    orderBy?: HealthAnalysisOrderByWithRelationInput | HealthAnalysisOrderByWithRelationInput[]
    cursor?: HealthAnalysisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HealthAnalysisScalarFieldEnum | HealthAnalysisScalarFieldEnum[]
  }

  /**
   * Patient.monitoringJobs
   */
  export type Patient$monitoringJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    where?: MonitoringJobWhereInput
    orderBy?: MonitoringJobOrderByWithRelationInput | MonitoringJobOrderByWithRelationInput[]
    cursor?: MonitoringJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MonitoringJobScalarFieldEnum | MonitoringJobScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    id: number | null
    numMedia: number | null
    patientId: number | null
  }

  export type MessageSumAggregateOutputType = {
    id: number | null
    numMedia: number | null
    patientId: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: number | null
    from: string | null
    to: string | null
    body: string | null
    direction: string | null
    messageType: string | null
    messageSid: string | null
    status: string | null
    errorMessage: string | null
    mediaUrl: string | null
    mediaType: string | null
    numMedia: number | null
    patientId: number | null
    createdAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: number | null
    from: string | null
    to: string | null
    body: string | null
    direction: string | null
    messageType: string | null
    messageSid: string | null
    status: string | null
    errorMessage: string | null
    mediaUrl: string | null
    mediaType: string | null
    numMedia: number | null
    patientId: number | null
    createdAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    from: number
    to: number
    body: number
    direction: number
    messageType: number
    messageSid: number
    status: number
    errorMessage: number
    mediaUrl: number
    mediaType: number
    numMedia: number
    patientId: number
    createdAt: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    id?: true
    numMedia?: true
    patientId?: true
  }

  export type MessageSumAggregateInputType = {
    id?: true
    numMedia?: true
    patientId?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    from?: true
    to?: true
    body?: true
    direction?: true
    messageType?: true
    messageSid?: true
    status?: true
    errorMessage?: true
    mediaUrl?: true
    mediaType?: true
    numMedia?: true
    patientId?: true
    createdAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    from?: true
    to?: true
    body?: true
    direction?: true
    messageType?: true
    messageSid?: true
    status?: true
    errorMessage?: true
    mediaUrl?: true
    mediaType?: true
    numMedia?: true
    patientId?: true
    createdAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    from?: true
    to?: true
    body?: true
    direction?: true
    messageType?: true
    messageSid?: true
    status?: true
    errorMessage?: true
    mediaUrl?: true
    mediaType?: true
    numMedia?: true
    patientId?: true
    createdAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: number
    from: string
    to: string
    body: string
    direction: string
    messageType: string
    messageSid: string | null
    status: string | null
    errorMessage: string | null
    mediaUrl: string | null
    mediaType: string | null
    numMedia: number
    patientId: number | null
    createdAt: Date
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    from?: boolean
    to?: boolean
    body?: boolean
    direction?: boolean
    messageType?: boolean
    messageSid?: boolean
    status?: boolean
    errorMessage?: boolean
    mediaUrl?: boolean
    mediaType?: boolean
    numMedia?: boolean
    patientId?: boolean
    createdAt?: boolean
    patient?: boolean | Message$patientArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    from?: boolean
    to?: boolean
    body?: boolean
    direction?: boolean
    messageType?: boolean
    messageSid?: boolean
    status?: boolean
    errorMessage?: boolean
    mediaUrl?: boolean
    mediaType?: boolean
    numMedia?: boolean
    patientId?: boolean
    createdAt?: boolean
    patient?: boolean | Message$patientArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    from?: boolean
    to?: boolean
    body?: boolean
    direction?: boolean
    messageType?: boolean
    messageSid?: boolean
    status?: boolean
    errorMessage?: boolean
    mediaUrl?: boolean
    mediaType?: boolean
    numMedia?: boolean
    patientId?: boolean
    createdAt?: boolean
    patient?: boolean | Message$patientArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>

  export type MessageSelectScalar = {
    id?: boolean
    from?: boolean
    to?: boolean
    body?: boolean
    direction?: boolean
    messageType?: boolean
    messageSid?: boolean
    status?: boolean
    errorMessage?: boolean
    mediaUrl?: boolean
    mediaType?: boolean
    numMedia?: boolean
    patientId?: boolean
    createdAt?: boolean
  }

  export type MessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "from" | "to" | "body" | "direction" | "messageType" | "messageSid" | "status" | "errorMessage" | "mediaUrl" | "mediaType" | "numMedia" | "patientId" | "createdAt", ExtArgs["result"]["message"]>
  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | Message$patientArgs<ExtArgs>
  }
  export type MessageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | Message$patientArgs<ExtArgs>
  }
  export type MessageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | Message$patientArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      from: string
      to: string
      body: string
      direction: string
      messageType: string
      messageSid: string | null
      status: string | null
      errorMessage: string | null
      mediaUrl: string | null
      mediaType: string | null
      numMedia: number
      patientId: number | null
      createdAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Messages and returns the data saved in the database.
     * @param {MessageCreateManyAndReturnArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessageCreateManyAndReturnArgs>(args?: SelectSubset<T, MessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages and returns the data updated in the database.
     * @param {MessageUpdateManyAndReturnArgs} args - Arguments to update many Messages.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Messages and only return the `id`
     * const messageWithIdOnly = await prisma.message.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessageUpdateManyAndReturnArgs>(args: SelectSubset<T, MessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends Message$patientArgs<ExtArgs> = {}>(args?: Subset<T, Message$patientArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'Int'>
    readonly from: FieldRef<"Message", 'String'>
    readonly to: FieldRef<"Message", 'String'>
    readonly body: FieldRef<"Message", 'String'>
    readonly direction: FieldRef<"Message", 'String'>
    readonly messageType: FieldRef<"Message", 'String'>
    readonly messageSid: FieldRef<"Message", 'String'>
    readonly status: FieldRef<"Message", 'String'>
    readonly errorMessage: FieldRef<"Message", 'String'>
    readonly mediaUrl: FieldRef<"Message", 'String'>
    readonly mediaType: FieldRef<"Message", 'String'>
    readonly numMedia: FieldRef<"Message", 'Int'>
    readonly patientId: FieldRef<"Message", 'Int'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message createManyAndReturn
   */
  export type MessageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
  }

  /**
   * Message updateManyAndReturn
   */
  export type MessageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
    /**
     * Limit how many Messages to delete.
     */
    limit?: number
  }

  /**
   * Message.patient
   */
  export type Message$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Message
     */
    omit?: MessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model HealthAnalysis
   */

  export type AggregateHealthAnalysis = {
    _count: HealthAnalysisCountAggregateOutputType | null
    _avg: HealthAnalysisAvgAggregateOutputType | null
    _sum: HealthAnalysisSumAggregateOutputType | null
    _min: HealthAnalysisMinAggregateOutputType | null
    _max: HealthAnalysisMaxAggregateOutputType | null
  }

  export type HealthAnalysisAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    currentTemperature: number | null
    riskScore: number | null
    confidence: number | null
    monitoringDuration: number | null
  }

  export type HealthAnalysisSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    currentTemperature: number | null
    riskScore: number | null
    confidence: number | null
    monitoringDuration: number | null
  }

  export type HealthAnalysisMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    symptomsText: string | null
    currentTemperature: number | null
    riskLevel: string | null
    riskScore: number | null
    confidence: number | null
    monitoringPattern: string | null
    monitoringDuration: number | null
    responseMessage: string | null
    monitoringScheduled: boolean | null
    createdAt: Date | null
  }

  export type HealthAnalysisMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    symptomsText: string | null
    currentTemperature: number | null
    riskLevel: string | null
    riskScore: number | null
    confidence: number | null
    monitoringPattern: string | null
    monitoringDuration: number | null
    responseMessage: string | null
    monitoringScheduled: boolean | null
    createdAt: Date | null
  }

  export type HealthAnalysisCountAggregateOutputType = {
    id: number
    patientId: number
    symptomsText: number
    currentTemperature: number
    riskLevel: number
    riskScore: number
    confidence: number
    symptomsDetected: number
    reasoning: number
    immediateActions: number
    monitoringPattern: number
    monitoringIntervals: number
    monitoringDuration: number
    responseMessage: number
    monitoringScheduled: number
    createdAt: number
    _all: number
  }


  export type HealthAnalysisAvgAggregateInputType = {
    id?: true
    patientId?: true
    currentTemperature?: true
    riskScore?: true
    confidence?: true
    monitoringDuration?: true
  }

  export type HealthAnalysisSumAggregateInputType = {
    id?: true
    patientId?: true
    currentTemperature?: true
    riskScore?: true
    confidence?: true
    monitoringDuration?: true
  }

  export type HealthAnalysisMinAggregateInputType = {
    id?: true
    patientId?: true
    symptomsText?: true
    currentTemperature?: true
    riskLevel?: true
    riskScore?: true
    confidence?: true
    monitoringPattern?: true
    monitoringDuration?: true
    responseMessage?: true
    monitoringScheduled?: true
    createdAt?: true
  }

  export type HealthAnalysisMaxAggregateInputType = {
    id?: true
    patientId?: true
    symptomsText?: true
    currentTemperature?: true
    riskLevel?: true
    riskScore?: true
    confidence?: true
    monitoringPattern?: true
    monitoringDuration?: true
    responseMessage?: true
    monitoringScheduled?: true
    createdAt?: true
  }

  export type HealthAnalysisCountAggregateInputType = {
    id?: true
    patientId?: true
    symptomsText?: true
    currentTemperature?: true
    riskLevel?: true
    riskScore?: true
    confidence?: true
    symptomsDetected?: true
    reasoning?: true
    immediateActions?: true
    monitoringPattern?: true
    monitoringIntervals?: true
    monitoringDuration?: true
    responseMessage?: true
    monitoringScheduled?: true
    createdAt?: true
    _all?: true
  }

  export type HealthAnalysisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthAnalysis to aggregate.
     */
    where?: HealthAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthAnalyses to fetch.
     */
    orderBy?: HealthAnalysisOrderByWithRelationInput | HealthAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HealthAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HealthAnalyses
    **/
    _count?: true | HealthAnalysisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HealthAnalysisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HealthAnalysisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HealthAnalysisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HealthAnalysisMaxAggregateInputType
  }

  export type GetHealthAnalysisAggregateType<T extends HealthAnalysisAggregateArgs> = {
        [P in keyof T & keyof AggregateHealthAnalysis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHealthAnalysis[P]>
      : GetScalarType<T[P], AggregateHealthAnalysis[P]>
  }




  export type HealthAnalysisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HealthAnalysisWhereInput
    orderBy?: HealthAnalysisOrderByWithAggregationInput | HealthAnalysisOrderByWithAggregationInput[]
    by: HealthAnalysisScalarFieldEnum[] | HealthAnalysisScalarFieldEnum
    having?: HealthAnalysisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HealthAnalysisCountAggregateInputType | true
    _avg?: HealthAnalysisAvgAggregateInputType
    _sum?: HealthAnalysisSumAggregateInputType
    _min?: HealthAnalysisMinAggregateInputType
    _max?: HealthAnalysisMaxAggregateInputType
  }

  export type HealthAnalysisGroupByOutputType = {
    id: number
    patientId: number
    symptomsText: string
    currentTemperature: number | null
    riskLevel: string
    riskScore: number
    confidence: number
    symptomsDetected: JsonValue | null
    reasoning: JsonValue | null
    immediateActions: JsonValue | null
    monitoringPattern: string
    monitoringIntervals: JsonValue | null
    monitoringDuration: number
    responseMessage: string
    monitoringScheduled: boolean
    createdAt: Date
    _count: HealthAnalysisCountAggregateOutputType | null
    _avg: HealthAnalysisAvgAggregateOutputType | null
    _sum: HealthAnalysisSumAggregateOutputType | null
    _min: HealthAnalysisMinAggregateOutputType | null
    _max: HealthAnalysisMaxAggregateOutputType | null
  }

  type GetHealthAnalysisGroupByPayload<T extends HealthAnalysisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HealthAnalysisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HealthAnalysisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HealthAnalysisGroupByOutputType[P]>
            : GetScalarType<T[P], HealthAnalysisGroupByOutputType[P]>
        }
      >
    >


  export type HealthAnalysisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    symptomsText?: boolean
    currentTemperature?: boolean
    riskLevel?: boolean
    riskScore?: boolean
    confidence?: boolean
    symptomsDetected?: boolean
    reasoning?: boolean
    immediateActions?: boolean
    monitoringPattern?: boolean
    monitoringIntervals?: boolean
    monitoringDuration?: boolean
    responseMessage?: boolean
    monitoringScheduled?: boolean
    createdAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["healthAnalysis"]>

  export type HealthAnalysisSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    symptomsText?: boolean
    currentTemperature?: boolean
    riskLevel?: boolean
    riskScore?: boolean
    confidence?: boolean
    symptomsDetected?: boolean
    reasoning?: boolean
    immediateActions?: boolean
    monitoringPattern?: boolean
    monitoringIntervals?: boolean
    monitoringDuration?: boolean
    responseMessage?: boolean
    monitoringScheduled?: boolean
    createdAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["healthAnalysis"]>

  export type HealthAnalysisSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    symptomsText?: boolean
    currentTemperature?: boolean
    riskLevel?: boolean
    riskScore?: boolean
    confidence?: boolean
    symptomsDetected?: boolean
    reasoning?: boolean
    immediateActions?: boolean
    monitoringPattern?: boolean
    monitoringIntervals?: boolean
    monitoringDuration?: boolean
    responseMessage?: boolean
    monitoringScheduled?: boolean
    createdAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["healthAnalysis"]>

  export type HealthAnalysisSelectScalar = {
    id?: boolean
    patientId?: boolean
    symptomsText?: boolean
    currentTemperature?: boolean
    riskLevel?: boolean
    riskScore?: boolean
    confidence?: boolean
    symptomsDetected?: boolean
    reasoning?: boolean
    immediateActions?: boolean
    monitoringPattern?: boolean
    monitoringIntervals?: boolean
    monitoringDuration?: boolean
    responseMessage?: boolean
    monitoringScheduled?: boolean
    createdAt?: boolean
  }

  export type HealthAnalysisOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "symptomsText" | "currentTemperature" | "riskLevel" | "riskScore" | "confidence" | "symptomsDetected" | "reasoning" | "immediateActions" | "monitoringPattern" | "monitoringIntervals" | "monitoringDuration" | "responseMessage" | "monitoringScheduled" | "createdAt", ExtArgs["result"]["healthAnalysis"]>
  export type HealthAnalysisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type HealthAnalysisIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type HealthAnalysisIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $HealthAnalysisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HealthAnalysis"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientId: number
      symptomsText: string
      currentTemperature: number | null
      riskLevel: string
      riskScore: number
      confidence: number
      symptomsDetected: Prisma.JsonValue | null
      reasoning: Prisma.JsonValue | null
      immediateActions: Prisma.JsonValue | null
      monitoringPattern: string
      monitoringIntervals: Prisma.JsonValue | null
      monitoringDuration: number
      responseMessage: string
      monitoringScheduled: boolean
      createdAt: Date
    }, ExtArgs["result"]["healthAnalysis"]>
    composites: {}
  }

  type HealthAnalysisGetPayload<S extends boolean | null | undefined | HealthAnalysisDefaultArgs> = $Result.GetResult<Prisma.$HealthAnalysisPayload, S>

  type HealthAnalysisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HealthAnalysisFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HealthAnalysisCountAggregateInputType | true
    }

  export interface HealthAnalysisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HealthAnalysis'], meta: { name: 'HealthAnalysis' } }
    /**
     * Find zero or one HealthAnalysis that matches the filter.
     * @param {HealthAnalysisFindUniqueArgs} args - Arguments to find a HealthAnalysis
     * @example
     * // Get one HealthAnalysis
     * const healthAnalysis = await prisma.healthAnalysis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HealthAnalysisFindUniqueArgs>(args: SelectSubset<T, HealthAnalysisFindUniqueArgs<ExtArgs>>): Prisma__HealthAnalysisClient<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HealthAnalysis that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HealthAnalysisFindUniqueOrThrowArgs} args - Arguments to find a HealthAnalysis
     * @example
     * // Get one HealthAnalysis
     * const healthAnalysis = await prisma.healthAnalysis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HealthAnalysisFindUniqueOrThrowArgs>(args: SelectSubset<T, HealthAnalysisFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HealthAnalysisClient<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HealthAnalysis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthAnalysisFindFirstArgs} args - Arguments to find a HealthAnalysis
     * @example
     * // Get one HealthAnalysis
     * const healthAnalysis = await prisma.healthAnalysis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HealthAnalysisFindFirstArgs>(args?: SelectSubset<T, HealthAnalysisFindFirstArgs<ExtArgs>>): Prisma__HealthAnalysisClient<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HealthAnalysis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthAnalysisFindFirstOrThrowArgs} args - Arguments to find a HealthAnalysis
     * @example
     * // Get one HealthAnalysis
     * const healthAnalysis = await prisma.healthAnalysis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HealthAnalysisFindFirstOrThrowArgs>(args?: SelectSubset<T, HealthAnalysisFindFirstOrThrowArgs<ExtArgs>>): Prisma__HealthAnalysisClient<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HealthAnalyses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthAnalysisFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HealthAnalyses
     * const healthAnalyses = await prisma.healthAnalysis.findMany()
     * 
     * // Get first 10 HealthAnalyses
     * const healthAnalyses = await prisma.healthAnalysis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const healthAnalysisWithIdOnly = await prisma.healthAnalysis.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HealthAnalysisFindManyArgs>(args?: SelectSubset<T, HealthAnalysisFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HealthAnalysis.
     * @param {HealthAnalysisCreateArgs} args - Arguments to create a HealthAnalysis.
     * @example
     * // Create one HealthAnalysis
     * const HealthAnalysis = await prisma.healthAnalysis.create({
     *   data: {
     *     // ... data to create a HealthAnalysis
     *   }
     * })
     * 
     */
    create<T extends HealthAnalysisCreateArgs>(args: SelectSubset<T, HealthAnalysisCreateArgs<ExtArgs>>): Prisma__HealthAnalysisClient<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HealthAnalyses.
     * @param {HealthAnalysisCreateManyArgs} args - Arguments to create many HealthAnalyses.
     * @example
     * // Create many HealthAnalyses
     * const healthAnalysis = await prisma.healthAnalysis.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HealthAnalysisCreateManyArgs>(args?: SelectSubset<T, HealthAnalysisCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HealthAnalyses and returns the data saved in the database.
     * @param {HealthAnalysisCreateManyAndReturnArgs} args - Arguments to create many HealthAnalyses.
     * @example
     * // Create many HealthAnalyses
     * const healthAnalysis = await prisma.healthAnalysis.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HealthAnalyses and only return the `id`
     * const healthAnalysisWithIdOnly = await prisma.healthAnalysis.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HealthAnalysisCreateManyAndReturnArgs>(args?: SelectSubset<T, HealthAnalysisCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HealthAnalysis.
     * @param {HealthAnalysisDeleteArgs} args - Arguments to delete one HealthAnalysis.
     * @example
     * // Delete one HealthAnalysis
     * const HealthAnalysis = await prisma.healthAnalysis.delete({
     *   where: {
     *     // ... filter to delete one HealthAnalysis
     *   }
     * })
     * 
     */
    delete<T extends HealthAnalysisDeleteArgs>(args: SelectSubset<T, HealthAnalysisDeleteArgs<ExtArgs>>): Prisma__HealthAnalysisClient<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HealthAnalysis.
     * @param {HealthAnalysisUpdateArgs} args - Arguments to update one HealthAnalysis.
     * @example
     * // Update one HealthAnalysis
     * const healthAnalysis = await prisma.healthAnalysis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HealthAnalysisUpdateArgs>(args: SelectSubset<T, HealthAnalysisUpdateArgs<ExtArgs>>): Prisma__HealthAnalysisClient<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HealthAnalyses.
     * @param {HealthAnalysisDeleteManyArgs} args - Arguments to filter HealthAnalyses to delete.
     * @example
     * // Delete a few HealthAnalyses
     * const { count } = await prisma.healthAnalysis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HealthAnalysisDeleteManyArgs>(args?: SelectSubset<T, HealthAnalysisDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HealthAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthAnalysisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HealthAnalyses
     * const healthAnalysis = await prisma.healthAnalysis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HealthAnalysisUpdateManyArgs>(args: SelectSubset<T, HealthAnalysisUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HealthAnalyses and returns the data updated in the database.
     * @param {HealthAnalysisUpdateManyAndReturnArgs} args - Arguments to update many HealthAnalyses.
     * @example
     * // Update many HealthAnalyses
     * const healthAnalysis = await prisma.healthAnalysis.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HealthAnalyses and only return the `id`
     * const healthAnalysisWithIdOnly = await prisma.healthAnalysis.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HealthAnalysisUpdateManyAndReturnArgs>(args: SelectSubset<T, HealthAnalysisUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HealthAnalysis.
     * @param {HealthAnalysisUpsertArgs} args - Arguments to update or create a HealthAnalysis.
     * @example
     * // Update or create a HealthAnalysis
     * const healthAnalysis = await prisma.healthAnalysis.upsert({
     *   create: {
     *     // ... data to create a HealthAnalysis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HealthAnalysis we want to update
     *   }
     * })
     */
    upsert<T extends HealthAnalysisUpsertArgs>(args: SelectSubset<T, HealthAnalysisUpsertArgs<ExtArgs>>): Prisma__HealthAnalysisClient<$Result.GetResult<Prisma.$HealthAnalysisPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HealthAnalyses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthAnalysisCountArgs} args - Arguments to filter HealthAnalyses to count.
     * @example
     * // Count the number of HealthAnalyses
     * const count = await prisma.healthAnalysis.count({
     *   where: {
     *     // ... the filter for the HealthAnalyses we want to count
     *   }
     * })
    **/
    count<T extends HealthAnalysisCountArgs>(
      args?: Subset<T, HealthAnalysisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HealthAnalysisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HealthAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthAnalysisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HealthAnalysisAggregateArgs>(args: Subset<T, HealthAnalysisAggregateArgs>): Prisma.PrismaPromise<GetHealthAnalysisAggregateType<T>>

    /**
     * Group by HealthAnalysis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HealthAnalysisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HealthAnalysisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HealthAnalysisGroupByArgs['orderBy'] }
        : { orderBy?: HealthAnalysisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HealthAnalysisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHealthAnalysisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HealthAnalysis model
   */
  readonly fields: HealthAnalysisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HealthAnalysis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HealthAnalysisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HealthAnalysis model
   */
  interface HealthAnalysisFieldRefs {
    readonly id: FieldRef<"HealthAnalysis", 'Int'>
    readonly patientId: FieldRef<"HealthAnalysis", 'Int'>
    readonly symptomsText: FieldRef<"HealthAnalysis", 'String'>
    readonly currentTemperature: FieldRef<"HealthAnalysis", 'Float'>
    readonly riskLevel: FieldRef<"HealthAnalysis", 'String'>
    readonly riskScore: FieldRef<"HealthAnalysis", 'Float'>
    readonly confidence: FieldRef<"HealthAnalysis", 'Float'>
    readonly symptomsDetected: FieldRef<"HealthAnalysis", 'Json'>
    readonly reasoning: FieldRef<"HealthAnalysis", 'Json'>
    readonly immediateActions: FieldRef<"HealthAnalysis", 'Json'>
    readonly monitoringPattern: FieldRef<"HealthAnalysis", 'String'>
    readonly monitoringIntervals: FieldRef<"HealthAnalysis", 'Json'>
    readonly monitoringDuration: FieldRef<"HealthAnalysis", 'Int'>
    readonly responseMessage: FieldRef<"HealthAnalysis", 'String'>
    readonly monitoringScheduled: FieldRef<"HealthAnalysis", 'Boolean'>
    readonly createdAt: FieldRef<"HealthAnalysis", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HealthAnalysis findUnique
   */
  export type HealthAnalysisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which HealthAnalysis to fetch.
     */
    where: HealthAnalysisWhereUniqueInput
  }

  /**
   * HealthAnalysis findUniqueOrThrow
   */
  export type HealthAnalysisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which HealthAnalysis to fetch.
     */
    where: HealthAnalysisWhereUniqueInput
  }

  /**
   * HealthAnalysis findFirst
   */
  export type HealthAnalysisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which HealthAnalysis to fetch.
     */
    where?: HealthAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthAnalyses to fetch.
     */
    orderBy?: HealthAnalysisOrderByWithRelationInput | HealthAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthAnalyses.
     */
    cursor?: HealthAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthAnalyses.
     */
    distinct?: HealthAnalysisScalarFieldEnum | HealthAnalysisScalarFieldEnum[]
  }

  /**
   * HealthAnalysis findFirstOrThrow
   */
  export type HealthAnalysisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which HealthAnalysis to fetch.
     */
    where?: HealthAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthAnalyses to fetch.
     */
    orderBy?: HealthAnalysisOrderByWithRelationInput | HealthAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HealthAnalyses.
     */
    cursor?: HealthAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthAnalyses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HealthAnalyses.
     */
    distinct?: HealthAnalysisScalarFieldEnum | HealthAnalysisScalarFieldEnum[]
  }

  /**
   * HealthAnalysis findMany
   */
  export type HealthAnalysisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    /**
     * Filter, which HealthAnalyses to fetch.
     */
    where?: HealthAnalysisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HealthAnalyses to fetch.
     */
    orderBy?: HealthAnalysisOrderByWithRelationInput | HealthAnalysisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HealthAnalyses.
     */
    cursor?: HealthAnalysisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HealthAnalyses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HealthAnalyses.
     */
    skip?: number
    distinct?: HealthAnalysisScalarFieldEnum | HealthAnalysisScalarFieldEnum[]
  }

  /**
   * HealthAnalysis create
   */
  export type HealthAnalysisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to create a HealthAnalysis.
     */
    data: XOR<HealthAnalysisCreateInput, HealthAnalysisUncheckedCreateInput>
  }

  /**
   * HealthAnalysis createMany
   */
  export type HealthAnalysisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HealthAnalyses.
     */
    data: HealthAnalysisCreateManyInput | HealthAnalysisCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HealthAnalysis createManyAndReturn
   */
  export type HealthAnalysisCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * The data used to create many HealthAnalyses.
     */
    data: HealthAnalysisCreateManyInput | HealthAnalysisCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HealthAnalysis update
   */
  export type HealthAnalysisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    /**
     * The data needed to update a HealthAnalysis.
     */
    data: XOR<HealthAnalysisUpdateInput, HealthAnalysisUncheckedUpdateInput>
    /**
     * Choose, which HealthAnalysis to update.
     */
    where: HealthAnalysisWhereUniqueInput
  }

  /**
   * HealthAnalysis updateMany
   */
  export type HealthAnalysisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HealthAnalyses.
     */
    data: XOR<HealthAnalysisUpdateManyMutationInput, HealthAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which HealthAnalyses to update
     */
    where?: HealthAnalysisWhereInput
    /**
     * Limit how many HealthAnalyses to update.
     */
    limit?: number
  }

  /**
   * HealthAnalysis updateManyAndReturn
   */
  export type HealthAnalysisUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * The data used to update HealthAnalyses.
     */
    data: XOR<HealthAnalysisUpdateManyMutationInput, HealthAnalysisUncheckedUpdateManyInput>
    /**
     * Filter which HealthAnalyses to update
     */
    where?: HealthAnalysisWhereInput
    /**
     * Limit how many HealthAnalyses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HealthAnalysis upsert
   */
  export type HealthAnalysisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    /**
     * The filter to search for the HealthAnalysis to update in case it exists.
     */
    where: HealthAnalysisWhereUniqueInput
    /**
     * In case the HealthAnalysis found by the `where` argument doesn't exist, create a new HealthAnalysis with this data.
     */
    create: XOR<HealthAnalysisCreateInput, HealthAnalysisUncheckedCreateInput>
    /**
     * In case the HealthAnalysis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HealthAnalysisUpdateInput, HealthAnalysisUncheckedUpdateInput>
  }

  /**
   * HealthAnalysis delete
   */
  export type HealthAnalysisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
    /**
     * Filter which HealthAnalysis to delete.
     */
    where: HealthAnalysisWhereUniqueInput
  }

  /**
   * HealthAnalysis deleteMany
   */
  export type HealthAnalysisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HealthAnalyses to delete
     */
    where?: HealthAnalysisWhereInput
    /**
     * Limit how many HealthAnalyses to delete.
     */
    limit?: number
  }

  /**
   * HealthAnalysis without action
   */
  export type HealthAnalysisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HealthAnalysis
     */
    select?: HealthAnalysisSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HealthAnalysis
     */
    omit?: HealthAnalysisOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HealthAnalysisInclude<ExtArgs> | null
  }


  /**
   * Model MonitoringJob
   */

  export type AggregateMonitoringJob = {
    _count: MonitoringJobCountAggregateOutputType | null
    _avg: MonitoringJobAvgAggregateOutputType | null
    _sum: MonitoringJobSumAggregateOutputType | null
    _min: MonitoringJobMinAggregateOutputType | null
    _max: MonitoringJobMaxAggregateOutputType | null
  }

  export type MonitoringJobAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    checkNumber: number | null
    totalChecks: number | null
  }

  export type MonitoringJobSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    checkNumber: number | null
    totalChecks: number | null
  }

  export type MonitoringJobMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    jobType: string | null
    jobId: string | null
    riskLevel: string | null
    checkNumber: number | null
    totalChecks: number | null
    status: string | null
    scheduledFor: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MonitoringJobMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    jobType: string | null
    jobId: string | null
    riskLevel: string | null
    checkNumber: number | null
    totalChecks: number | null
    status: string | null
    scheduledFor: Date | null
    completedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MonitoringJobCountAggregateOutputType = {
    id: number
    patientId: number
    jobType: number
    jobId: number
    riskLevel: number
    checkNumber: number
    totalChecks: number
    status: number
    scheduledFor: number
    completedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MonitoringJobAvgAggregateInputType = {
    id?: true
    patientId?: true
    checkNumber?: true
    totalChecks?: true
  }

  export type MonitoringJobSumAggregateInputType = {
    id?: true
    patientId?: true
    checkNumber?: true
    totalChecks?: true
  }

  export type MonitoringJobMinAggregateInputType = {
    id?: true
    patientId?: true
    jobType?: true
    jobId?: true
    riskLevel?: true
    checkNumber?: true
    totalChecks?: true
    status?: true
    scheduledFor?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MonitoringJobMaxAggregateInputType = {
    id?: true
    patientId?: true
    jobType?: true
    jobId?: true
    riskLevel?: true
    checkNumber?: true
    totalChecks?: true
    status?: true
    scheduledFor?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MonitoringJobCountAggregateInputType = {
    id?: true
    patientId?: true
    jobType?: true
    jobId?: true
    riskLevel?: true
    checkNumber?: true
    totalChecks?: true
    status?: true
    scheduledFor?: true
    completedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MonitoringJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MonitoringJob to aggregate.
     */
    where?: MonitoringJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonitoringJobs to fetch.
     */
    orderBy?: MonitoringJobOrderByWithRelationInput | MonitoringJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MonitoringJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonitoringJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonitoringJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MonitoringJobs
    **/
    _count?: true | MonitoringJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MonitoringJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MonitoringJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MonitoringJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MonitoringJobMaxAggregateInputType
  }

  export type GetMonitoringJobAggregateType<T extends MonitoringJobAggregateArgs> = {
        [P in keyof T & keyof AggregateMonitoringJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonitoringJob[P]>
      : GetScalarType<T[P], AggregateMonitoringJob[P]>
  }




  export type MonitoringJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MonitoringJobWhereInput
    orderBy?: MonitoringJobOrderByWithAggregationInput | MonitoringJobOrderByWithAggregationInput[]
    by: MonitoringJobScalarFieldEnum[] | MonitoringJobScalarFieldEnum
    having?: MonitoringJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MonitoringJobCountAggregateInputType | true
    _avg?: MonitoringJobAvgAggregateInputType
    _sum?: MonitoringJobSumAggregateInputType
    _min?: MonitoringJobMinAggregateInputType
    _max?: MonitoringJobMaxAggregateInputType
  }

  export type MonitoringJobGroupByOutputType = {
    id: number
    patientId: number
    jobType: string
    jobId: string
    riskLevel: string | null
    checkNumber: number | null
    totalChecks: number | null
    status: string
    scheduledFor: Date
    completedAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: MonitoringJobCountAggregateOutputType | null
    _avg: MonitoringJobAvgAggregateOutputType | null
    _sum: MonitoringJobSumAggregateOutputType | null
    _min: MonitoringJobMinAggregateOutputType | null
    _max: MonitoringJobMaxAggregateOutputType | null
  }

  type GetMonitoringJobGroupByPayload<T extends MonitoringJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MonitoringJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MonitoringJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MonitoringJobGroupByOutputType[P]>
            : GetScalarType<T[P], MonitoringJobGroupByOutputType[P]>
        }
      >
    >


  export type MonitoringJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    jobType?: boolean
    jobId?: boolean
    riskLevel?: boolean
    checkNumber?: boolean
    totalChecks?: boolean
    status?: boolean
    scheduledFor?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monitoringJob"]>

  export type MonitoringJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    jobType?: boolean
    jobId?: boolean
    riskLevel?: boolean
    checkNumber?: boolean
    totalChecks?: boolean
    status?: boolean
    scheduledFor?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monitoringJob"]>

  export type MonitoringJobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    jobType?: boolean
    jobId?: boolean
    riskLevel?: boolean
    checkNumber?: boolean
    totalChecks?: boolean
    status?: boolean
    scheduledFor?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monitoringJob"]>

  export type MonitoringJobSelectScalar = {
    id?: boolean
    patientId?: boolean
    jobType?: boolean
    jobId?: boolean
    riskLevel?: boolean
    checkNumber?: boolean
    totalChecks?: boolean
    status?: boolean
    scheduledFor?: boolean
    completedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MonitoringJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "jobType" | "jobId" | "riskLevel" | "checkNumber" | "totalChecks" | "status" | "scheduledFor" | "completedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["monitoringJob"]>
  export type MonitoringJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type MonitoringJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }
  export type MonitoringJobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
  }

  export type $MonitoringJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MonitoringJob"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patientId: number
      jobType: string
      jobId: string
      riskLevel: string | null
      checkNumber: number | null
      totalChecks: number | null
      status: string
      scheduledFor: Date
      completedAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["monitoringJob"]>
    composites: {}
  }

  type MonitoringJobGetPayload<S extends boolean | null | undefined | MonitoringJobDefaultArgs> = $Result.GetResult<Prisma.$MonitoringJobPayload, S>

  type MonitoringJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MonitoringJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MonitoringJobCountAggregateInputType | true
    }

  export interface MonitoringJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MonitoringJob'], meta: { name: 'MonitoringJob' } }
    /**
     * Find zero or one MonitoringJob that matches the filter.
     * @param {MonitoringJobFindUniqueArgs} args - Arguments to find a MonitoringJob
     * @example
     * // Get one MonitoringJob
     * const monitoringJob = await prisma.monitoringJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MonitoringJobFindUniqueArgs>(args: SelectSubset<T, MonitoringJobFindUniqueArgs<ExtArgs>>): Prisma__MonitoringJobClient<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MonitoringJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MonitoringJobFindUniqueOrThrowArgs} args - Arguments to find a MonitoringJob
     * @example
     * // Get one MonitoringJob
     * const monitoringJob = await prisma.monitoringJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MonitoringJobFindUniqueOrThrowArgs>(args: SelectSubset<T, MonitoringJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MonitoringJobClient<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MonitoringJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringJobFindFirstArgs} args - Arguments to find a MonitoringJob
     * @example
     * // Get one MonitoringJob
     * const monitoringJob = await prisma.monitoringJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MonitoringJobFindFirstArgs>(args?: SelectSubset<T, MonitoringJobFindFirstArgs<ExtArgs>>): Prisma__MonitoringJobClient<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MonitoringJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringJobFindFirstOrThrowArgs} args - Arguments to find a MonitoringJob
     * @example
     * // Get one MonitoringJob
     * const monitoringJob = await prisma.monitoringJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MonitoringJobFindFirstOrThrowArgs>(args?: SelectSubset<T, MonitoringJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__MonitoringJobClient<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MonitoringJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MonitoringJobs
     * const monitoringJobs = await prisma.monitoringJob.findMany()
     * 
     * // Get first 10 MonitoringJobs
     * const monitoringJobs = await prisma.monitoringJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monitoringJobWithIdOnly = await prisma.monitoringJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MonitoringJobFindManyArgs>(args?: SelectSubset<T, MonitoringJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MonitoringJob.
     * @param {MonitoringJobCreateArgs} args - Arguments to create a MonitoringJob.
     * @example
     * // Create one MonitoringJob
     * const MonitoringJob = await prisma.monitoringJob.create({
     *   data: {
     *     // ... data to create a MonitoringJob
     *   }
     * })
     * 
     */
    create<T extends MonitoringJobCreateArgs>(args: SelectSubset<T, MonitoringJobCreateArgs<ExtArgs>>): Prisma__MonitoringJobClient<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MonitoringJobs.
     * @param {MonitoringJobCreateManyArgs} args - Arguments to create many MonitoringJobs.
     * @example
     * // Create many MonitoringJobs
     * const monitoringJob = await prisma.monitoringJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MonitoringJobCreateManyArgs>(args?: SelectSubset<T, MonitoringJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MonitoringJobs and returns the data saved in the database.
     * @param {MonitoringJobCreateManyAndReturnArgs} args - Arguments to create many MonitoringJobs.
     * @example
     * // Create many MonitoringJobs
     * const monitoringJob = await prisma.monitoringJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MonitoringJobs and only return the `id`
     * const monitoringJobWithIdOnly = await prisma.monitoringJob.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MonitoringJobCreateManyAndReturnArgs>(args?: SelectSubset<T, MonitoringJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MonitoringJob.
     * @param {MonitoringJobDeleteArgs} args - Arguments to delete one MonitoringJob.
     * @example
     * // Delete one MonitoringJob
     * const MonitoringJob = await prisma.monitoringJob.delete({
     *   where: {
     *     // ... filter to delete one MonitoringJob
     *   }
     * })
     * 
     */
    delete<T extends MonitoringJobDeleteArgs>(args: SelectSubset<T, MonitoringJobDeleteArgs<ExtArgs>>): Prisma__MonitoringJobClient<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MonitoringJob.
     * @param {MonitoringJobUpdateArgs} args - Arguments to update one MonitoringJob.
     * @example
     * // Update one MonitoringJob
     * const monitoringJob = await prisma.monitoringJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MonitoringJobUpdateArgs>(args: SelectSubset<T, MonitoringJobUpdateArgs<ExtArgs>>): Prisma__MonitoringJobClient<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MonitoringJobs.
     * @param {MonitoringJobDeleteManyArgs} args - Arguments to filter MonitoringJobs to delete.
     * @example
     * // Delete a few MonitoringJobs
     * const { count } = await prisma.monitoringJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MonitoringJobDeleteManyArgs>(args?: SelectSubset<T, MonitoringJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MonitoringJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MonitoringJobs
     * const monitoringJob = await prisma.monitoringJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MonitoringJobUpdateManyArgs>(args: SelectSubset<T, MonitoringJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MonitoringJobs and returns the data updated in the database.
     * @param {MonitoringJobUpdateManyAndReturnArgs} args - Arguments to update many MonitoringJobs.
     * @example
     * // Update many MonitoringJobs
     * const monitoringJob = await prisma.monitoringJob.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MonitoringJobs and only return the `id`
     * const monitoringJobWithIdOnly = await prisma.monitoringJob.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MonitoringJobUpdateManyAndReturnArgs>(args: SelectSubset<T, MonitoringJobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MonitoringJob.
     * @param {MonitoringJobUpsertArgs} args - Arguments to update or create a MonitoringJob.
     * @example
     * // Update or create a MonitoringJob
     * const monitoringJob = await prisma.monitoringJob.upsert({
     *   create: {
     *     // ... data to create a MonitoringJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MonitoringJob we want to update
     *   }
     * })
     */
    upsert<T extends MonitoringJobUpsertArgs>(args: SelectSubset<T, MonitoringJobUpsertArgs<ExtArgs>>): Prisma__MonitoringJobClient<$Result.GetResult<Prisma.$MonitoringJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MonitoringJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringJobCountArgs} args - Arguments to filter MonitoringJobs to count.
     * @example
     * // Count the number of MonitoringJobs
     * const count = await prisma.monitoringJob.count({
     *   where: {
     *     // ... the filter for the MonitoringJobs we want to count
     *   }
     * })
    **/
    count<T extends MonitoringJobCountArgs>(
      args?: Subset<T, MonitoringJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MonitoringJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MonitoringJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MonitoringJobAggregateArgs>(args: Subset<T, MonitoringJobAggregateArgs>): Prisma.PrismaPromise<GetMonitoringJobAggregateType<T>>

    /**
     * Group by MonitoringJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MonitoringJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MonitoringJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MonitoringJobGroupByArgs['orderBy'] }
        : { orderBy?: MonitoringJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MonitoringJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonitoringJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MonitoringJob model
   */
  readonly fields: MonitoringJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MonitoringJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MonitoringJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MonitoringJob model
   */
  interface MonitoringJobFieldRefs {
    readonly id: FieldRef<"MonitoringJob", 'Int'>
    readonly patientId: FieldRef<"MonitoringJob", 'Int'>
    readonly jobType: FieldRef<"MonitoringJob", 'String'>
    readonly jobId: FieldRef<"MonitoringJob", 'String'>
    readonly riskLevel: FieldRef<"MonitoringJob", 'String'>
    readonly checkNumber: FieldRef<"MonitoringJob", 'Int'>
    readonly totalChecks: FieldRef<"MonitoringJob", 'Int'>
    readonly status: FieldRef<"MonitoringJob", 'String'>
    readonly scheduledFor: FieldRef<"MonitoringJob", 'DateTime'>
    readonly completedAt: FieldRef<"MonitoringJob", 'DateTime'>
    readonly createdAt: FieldRef<"MonitoringJob", 'DateTime'>
    readonly updatedAt: FieldRef<"MonitoringJob", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MonitoringJob findUnique
   */
  export type MonitoringJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    /**
     * Filter, which MonitoringJob to fetch.
     */
    where: MonitoringJobWhereUniqueInput
  }

  /**
   * MonitoringJob findUniqueOrThrow
   */
  export type MonitoringJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    /**
     * Filter, which MonitoringJob to fetch.
     */
    where: MonitoringJobWhereUniqueInput
  }

  /**
   * MonitoringJob findFirst
   */
  export type MonitoringJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    /**
     * Filter, which MonitoringJob to fetch.
     */
    where?: MonitoringJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonitoringJobs to fetch.
     */
    orderBy?: MonitoringJobOrderByWithRelationInput | MonitoringJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonitoringJobs.
     */
    cursor?: MonitoringJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonitoringJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonitoringJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonitoringJobs.
     */
    distinct?: MonitoringJobScalarFieldEnum | MonitoringJobScalarFieldEnum[]
  }

  /**
   * MonitoringJob findFirstOrThrow
   */
  export type MonitoringJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    /**
     * Filter, which MonitoringJob to fetch.
     */
    where?: MonitoringJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonitoringJobs to fetch.
     */
    orderBy?: MonitoringJobOrderByWithRelationInput | MonitoringJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MonitoringJobs.
     */
    cursor?: MonitoringJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonitoringJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonitoringJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MonitoringJobs.
     */
    distinct?: MonitoringJobScalarFieldEnum | MonitoringJobScalarFieldEnum[]
  }

  /**
   * MonitoringJob findMany
   */
  export type MonitoringJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    /**
     * Filter, which MonitoringJobs to fetch.
     */
    where?: MonitoringJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MonitoringJobs to fetch.
     */
    orderBy?: MonitoringJobOrderByWithRelationInput | MonitoringJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MonitoringJobs.
     */
    cursor?: MonitoringJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MonitoringJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MonitoringJobs.
     */
    skip?: number
    distinct?: MonitoringJobScalarFieldEnum | MonitoringJobScalarFieldEnum[]
  }

  /**
   * MonitoringJob create
   */
  export type MonitoringJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    /**
     * The data needed to create a MonitoringJob.
     */
    data: XOR<MonitoringJobCreateInput, MonitoringJobUncheckedCreateInput>
  }

  /**
   * MonitoringJob createMany
   */
  export type MonitoringJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MonitoringJobs.
     */
    data: MonitoringJobCreateManyInput | MonitoringJobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MonitoringJob createManyAndReturn
   */
  export type MonitoringJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * The data used to create many MonitoringJobs.
     */
    data: MonitoringJobCreateManyInput | MonitoringJobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MonitoringJob update
   */
  export type MonitoringJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    /**
     * The data needed to update a MonitoringJob.
     */
    data: XOR<MonitoringJobUpdateInput, MonitoringJobUncheckedUpdateInput>
    /**
     * Choose, which MonitoringJob to update.
     */
    where: MonitoringJobWhereUniqueInput
  }

  /**
   * MonitoringJob updateMany
   */
  export type MonitoringJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MonitoringJobs.
     */
    data: XOR<MonitoringJobUpdateManyMutationInput, MonitoringJobUncheckedUpdateManyInput>
    /**
     * Filter which MonitoringJobs to update
     */
    where?: MonitoringJobWhereInput
    /**
     * Limit how many MonitoringJobs to update.
     */
    limit?: number
  }

  /**
   * MonitoringJob updateManyAndReturn
   */
  export type MonitoringJobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * The data used to update MonitoringJobs.
     */
    data: XOR<MonitoringJobUpdateManyMutationInput, MonitoringJobUncheckedUpdateManyInput>
    /**
     * Filter which MonitoringJobs to update
     */
    where?: MonitoringJobWhereInput
    /**
     * Limit how many MonitoringJobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MonitoringJob upsert
   */
  export type MonitoringJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    /**
     * The filter to search for the MonitoringJob to update in case it exists.
     */
    where: MonitoringJobWhereUniqueInput
    /**
     * In case the MonitoringJob found by the `where` argument doesn't exist, create a new MonitoringJob with this data.
     */
    create: XOR<MonitoringJobCreateInput, MonitoringJobUncheckedCreateInput>
    /**
     * In case the MonitoringJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MonitoringJobUpdateInput, MonitoringJobUncheckedUpdateInput>
  }

  /**
   * MonitoringJob delete
   */
  export type MonitoringJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
    /**
     * Filter which MonitoringJob to delete.
     */
    where: MonitoringJobWhereUniqueInput
  }

  /**
   * MonitoringJob deleteMany
   */
  export type MonitoringJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MonitoringJobs to delete
     */
    where?: MonitoringJobWhereInput
    /**
     * Limit how many MonitoringJobs to delete.
     */
    limit?: number
  }

  /**
   * MonitoringJob without action
   */
  export type MonitoringJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MonitoringJob
     */
    select?: MonitoringJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MonitoringJob
     */
    omit?: MonitoringJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MonitoringJobInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PatientScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    phoneNumber: 'phoneNumber',
    zipcode: 'zipcode',
    age: 'age',
    optOutCustomMessages: 'optOutCustomMessages',
    consentGiven: 'consentGiven',
    consentDate: 'consentDate',
    familyContactName: 'familyContactName',
    familyContactPhone: 'familyContactPhone',
    familyContactRelation: 'familyContactRelation',
    familyContactConsent: 'familyContactConsent',
    healthcareProviderName: 'healthcareProviderName',
    healthcareProviderHospital: 'healthcareProviderHospital',
    healthcareProviderPhone: 'healthcareProviderPhone',
    healthcareProviderConsent: 'healthcareProviderConsent',
    medications: 'medications',
    preExistingConditions: 'preExistingConditions',
    chronicConditions: 'chronicConditions',
    hospital: 'hospital',
    dialysisSchedule: 'dialysisSchedule',
    smoker: 'smoker',
    isPregnant: 'isPregnant',
    activityLevel: 'activityLevel',
    riskLevel: 'riskLevel',
    monitoringEnabled: 'monitoringEnabled',
    preferredLanguage: 'preferredLanguage',
    registrationComplete: 'registrationComplete',
    lastHealthCheck: 'lastHealthCheck',
    lastRiskLevel: 'lastRiskLevel',
    lastUrgency: 'lastUrgency',
    lastEscalationLevel: 'lastEscalationLevel',
    lastMonitoringInterval: 'lastMonitoringInterval',
    lastSymptomText: 'lastSymptomText',
    lastAnalysisTimestamp: 'lastAnalysisTimestamp',
    lastWeatherTemp: 'lastWeatherTemp',
    lastWeatherHumidity: 'lastWeatherHumidity',
    confidenceScore: 'confidenceScore',
    emergencyAlerted: 'emergencyAlerted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    from: 'from',
    to: 'to',
    body: 'body',
    direction: 'direction',
    messageType: 'messageType',
    messageSid: 'messageSid',
    status: 'status',
    errorMessage: 'errorMessage',
    mediaUrl: 'mediaUrl',
    mediaType: 'mediaType',
    numMedia: 'numMedia',
    patientId: 'patientId',
    createdAt: 'createdAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const HealthAnalysisScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    symptomsText: 'symptomsText',
    currentTemperature: 'currentTemperature',
    riskLevel: 'riskLevel',
    riskScore: 'riskScore',
    confidence: 'confidence',
    symptomsDetected: 'symptomsDetected',
    reasoning: 'reasoning',
    immediateActions: 'immediateActions',
    monitoringPattern: 'monitoringPattern',
    monitoringIntervals: 'monitoringIntervals',
    monitoringDuration: 'monitoringDuration',
    responseMessage: 'responseMessage',
    monitoringScheduled: 'monitoringScheduled',
    createdAt: 'createdAt'
  };

  export type HealthAnalysisScalarFieldEnum = (typeof HealthAnalysisScalarFieldEnum)[keyof typeof HealthAnalysisScalarFieldEnum]


  export const MonitoringJobScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    jobType: 'jobType',
    jobId: 'jobId',
    riskLevel: 'riskLevel',
    checkNumber: 'checkNumber',
    totalChecks: 'totalChecks',
    status: 'status',
    scheduledFor: 'scheduledFor',
    completedAt: 'completedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MonitoringJobScalarFieldEnum = (typeof MonitoringJobScalarFieldEnum)[keyof typeof MonitoringJobScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: IntFilter<"Patient"> | number
    firstName?: StringFilter<"Patient"> | string
    phoneNumber?: StringFilter<"Patient"> | string
    zipcode?: StringFilter<"Patient"> | string
    age?: IntFilter<"Patient"> | number
    optOutCustomMessages?: BoolFilter<"Patient"> | boolean
    consentGiven?: BoolFilter<"Patient"> | boolean
    consentDate?: DateTimeNullableFilter<"Patient"> | Date | string | null
    familyContactName?: StringNullableFilter<"Patient"> | string | null
    familyContactPhone?: StringNullableFilter<"Patient"> | string | null
    familyContactRelation?: StringNullableFilter<"Patient"> | string | null
    familyContactConsent?: BoolFilter<"Patient"> | boolean
    healthcareProviderName?: StringNullableFilter<"Patient"> | string | null
    healthcareProviderHospital?: StringNullableFilter<"Patient"> | string | null
    healthcareProviderPhone?: StringNullableFilter<"Patient"> | string | null
    healthcareProviderConsent?: BoolFilter<"Patient"> | boolean
    medications?: JsonNullableFilter<"Patient">
    preExistingConditions?: JsonNullableFilter<"Patient">
    chronicConditions?: JsonNullableFilter<"Patient">
    hospital?: StringNullableFilter<"Patient"> | string | null
    dialysisSchedule?: StringNullableFilter<"Patient"> | string | null
    smoker?: BoolFilter<"Patient"> | boolean
    isPregnant?: BoolFilter<"Patient"> | boolean
    activityLevel?: StringFilter<"Patient"> | string
    riskLevel?: StringFilter<"Patient"> | string
    monitoringEnabled?: BoolFilter<"Patient"> | boolean
    preferredLanguage?: StringFilter<"Patient"> | string
    registrationComplete?: BoolFilter<"Patient"> | boolean
    lastHealthCheck?: DateTimeNullableFilter<"Patient"> | Date | string | null
    lastRiskLevel?: StringNullableFilter<"Patient"> | string | null
    lastUrgency?: StringNullableFilter<"Patient"> | string | null
    lastEscalationLevel?: StringNullableFilter<"Patient"> | string | null
    lastMonitoringInterval?: IntNullableFilter<"Patient"> | number | null
    lastSymptomText?: StringNullableFilter<"Patient"> | string | null
    lastAnalysisTimestamp?: DateTimeNullableFilter<"Patient"> | Date | string | null
    lastWeatherTemp?: FloatNullableFilter<"Patient"> | number | null
    lastWeatherHumidity?: FloatNullableFilter<"Patient"> | number | null
    confidenceScore?: FloatNullableFilter<"Patient"> | number | null
    emergencyAlerted?: BoolFilter<"Patient"> | boolean
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    messages?: MessageListRelationFilter
    healthAnalyses?: HealthAnalysisListRelationFilter
    monitoringJobs?: MonitoringJobListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    phoneNumber?: SortOrder
    zipcode?: SortOrder
    age?: SortOrder
    optOutCustomMessages?: SortOrder
    consentGiven?: SortOrder
    consentDate?: SortOrderInput | SortOrder
    familyContactName?: SortOrderInput | SortOrder
    familyContactPhone?: SortOrderInput | SortOrder
    familyContactRelation?: SortOrderInput | SortOrder
    familyContactConsent?: SortOrder
    healthcareProviderName?: SortOrderInput | SortOrder
    healthcareProviderHospital?: SortOrderInput | SortOrder
    healthcareProviderPhone?: SortOrderInput | SortOrder
    healthcareProviderConsent?: SortOrder
    medications?: SortOrderInput | SortOrder
    preExistingConditions?: SortOrderInput | SortOrder
    chronicConditions?: SortOrderInput | SortOrder
    hospital?: SortOrderInput | SortOrder
    dialysisSchedule?: SortOrderInput | SortOrder
    smoker?: SortOrder
    isPregnant?: SortOrder
    activityLevel?: SortOrder
    riskLevel?: SortOrder
    monitoringEnabled?: SortOrder
    preferredLanguage?: SortOrder
    registrationComplete?: SortOrder
    lastHealthCheck?: SortOrderInput | SortOrder
    lastRiskLevel?: SortOrderInput | SortOrder
    lastUrgency?: SortOrderInput | SortOrder
    lastEscalationLevel?: SortOrderInput | SortOrder
    lastMonitoringInterval?: SortOrderInput | SortOrder
    lastSymptomText?: SortOrderInput | SortOrder
    lastAnalysisTimestamp?: SortOrderInput | SortOrder
    lastWeatherTemp?: SortOrderInput | SortOrder
    lastWeatherHumidity?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    emergencyAlerted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messages?: MessageOrderByRelationAggregateInput
    healthAnalyses?: HealthAnalysisOrderByRelationAggregateInput
    monitoringJobs?: MonitoringJobOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    phoneNumber?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    firstName?: StringFilter<"Patient"> | string
    zipcode?: StringFilter<"Patient"> | string
    age?: IntFilter<"Patient"> | number
    optOutCustomMessages?: BoolFilter<"Patient"> | boolean
    consentGiven?: BoolFilter<"Patient"> | boolean
    consentDate?: DateTimeNullableFilter<"Patient"> | Date | string | null
    familyContactName?: StringNullableFilter<"Patient"> | string | null
    familyContactPhone?: StringNullableFilter<"Patient"> | string | null
    familyContactRelation?: StringNullableFilter<"Patient"> | string | null
    familyContactConsent?: BoolFilter<"Patient"> | boolean
    healthcareProviderName?: StringNullableFilter<"Patient"> | string | null
    healthcareProviderHospital?: StringNullableFilter<"Patient"> | string | null
    healthcareProviderPhone?: StringNullableFilter<"Patient"> | string | null
    healthcareProviderConsent?: BoolFilter<"Patient"> | boolean
    medications?: JsonNullableFilter<"Patient">
    preExistingConditions?: JsonNullableFilter<"Patient">
    chronicConditions?: JsonNullableFilter<"Patient">
    hospital?: StringNullableFilter<"Patient"> | string | null
    dialysisSchedule?: StringNullableFilter<"Patient"> | string | null
    smoker?: BoolFilter<"Patient"> | boolean
    isPregnant?: BoolFilter<"Patient"> | boolean
    activityLevel?: StringFilter<"Patient"> | string
    riskLevel?: StringFilter<"Patient"> | string
    monitoringEnabled?: BoolFilter<"Patient"> | boolean
    preferredLanguage?: StringFilter<"Patient"> | string
    registrationComplete?: BoolFilter<"Patient"> | boolean
    lastHealthCheck?: DateTimeNullableFilter<"Patient"> | Date | string | null
    lastRiskLevel?: StringNullableFilter<"Patient"> | string | null
    lastUrgency?: StringNullableFilter<"Patient"> | string | null
    lastEscalationLevel?: StringNullableFilter<"Patient"> | string | null
    lastMonitoringInterval?: IntNullableFilter<"Patient"> | number | null
    lastSymptomText?: StringNullableFilter<"Patient"> | string | null
    lastAnalysisTimestamp?: DateTimeNullableFilter<"Patient"> | Date | string | null
    lastWeatherTemp?: FloatNullableFilter<"Patient"> | number | null
    lastWeatherHumidity?: FloatNullableFilter<"Patient"> | number | null
    confidenceScore?: FloatNullableFilter<"Patient"> | number | null
    emergencyAlerted?: BoolFilter<"Patient"> | boolean
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    messages?: MessageListRelationFilter
    healthAnalyses?: HealthAnalysisListRelationFilter
    monitoringJobs?: MonitoringJobListRelationFilter
  }, "id" | "phoneNumber">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    phoneNumber?: SortOrder
    zipcode?: SortOrder
    age?: SortOrder
    optOutCustomMessages?: SortOrder
    consentGiven?: SortOrder
    consentDate?: SortOrderInput | SortOrder
    familyContactName?: SortOrderInput | SortOrder
    familyContactPhone?: SortOrderInput | SortOrder
    familyContactRelation?: SortOrderInput | SortOrder
    familyContactConsent?: SortOrder
    healthcareProviderName?: SortOrderInput | SortOrder
    healthcareProviderHospital?: SortOrderInput | SortOrder
    healthcareProviderPhone?: SortOrderInput | SortOrder
    healthcareProviderConsent?: SortOrder
    medications?: SortOrderInput | SortOrder
    preExistingConditions?: SortOrderInput | SortOrder
    chronicConditions?: SortOrderInput | SortOrder
    hospital?: SortOrderInput | SortOrder
    dialysisSchedule?: SortOrderInput | SortOrder
    smoker?: SortOrder
    isPregnant?: SortOrder
    activityLevel?: SortOrder
    riskLevel?: SortOrder
    monitoringEnabled?: SortOrder
    preferredLanguage?: SortOrder
    registrationComplete?: SortOrder
    lastHealthCheck?: SortOrderInput | SortOrder
    lastRiskLevel?: SortOrderInput | SortOrder
    lastUrgency?: SortOrderInput | SortOrder
    lastEscalationLevel?: SortOrderInput | SortOrder
    lastMonitoringInterval?: SortOrderInput | SortOrder
    lastSymptomText?: SortOrderInput | SortOrder
    lastAnalysisTimestamp?: SortOrderInput | SortOrder
    lastWeatherTemp?: SortOrderInput | SortOrder
    lastWeatherHumidity?: SortOrderInput | SortOrder
    confidenceScore?: SortOrderInput | SortOrder
    emergencyAlerted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Patient"> | number
    firstName?: StringWithAggregatesFilter<"Patient"> | string
    phoneNumber?: StringWithAggregatesFilter<"Patient"> | string
    zipcode?: StringWithAggregatesFilter<"Patient"> | string
    age?: IntWithAggregatesFilter<"Patient"> | number
    optOutCustomMessages?: BoolWithAggregatesFilter<"Patient"> | boolean
    consentGiven?: BoolWithAggregatesFilter<"Patient"> | boolean
    consentDate?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    familyContactName?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    familyContactPhone?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    familyContactRelation?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    familyContactConsent?: BoolWithAggregatesFilter<"Patient"> | boolean
    healthcareProviderName?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    healthcareProviderHospital?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    healthcareProviderPhone?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    healthcareProviderConsent?: BoolWithAggregatesFilter<"Patient"> | boolean
    medications?: JsonNullableWithAggregatesFilter<"Patient">
    preExistingConditions?: JsonNullableWithAggregatesFilter<"Patient">
    chronicConditions?: JsonNullableWithAggregatesFilter<"Patient">
    hospital?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    dialysisSchedule?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    smoker?: BoolWithAggregatesFilter<"Patient"> | boolean
    isPregnant?: BoolWithAggregatesFilter<"Patient"> | boolean
    activityLevel?: StringWithAggregatesFilter<"Patient"> | string
    riskLevel?: StringWithAggregatesFilter<"Patient"> | string
    monitoringEnabled?: BoolWithAggregatesFilter<"Patient"> | boolean
    preferredLanguage?: StringWithAggregatesFilter<"Patient"> | string
    registrationComplete?: BoolWithAggregatesFilter<"Patient"> | boolean
    lastHealthCheck?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    lastRiskLevel?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    lastUrgency?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    lastEscalationLevel?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    lastMonitoringInterval?: IntNullableWithAggregatesFilter<"Patient"> | number | null
    lastSymptomText?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    lastAnalysisTimestamp?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    lastWeatherTemp?: FloatNullableWithAggregatesFilter<"Patient"> | number | null
    lastWeatherHumidity?: FloatNullableWithAggregatesFilter<"Patient"> | number | null
    confidenceScore?: FloatNullableWithAggregatesFilter<"Patient"> | number | null
    emergencyAlerted?: BoolWithAggregatesFilter<"Patient"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: IntFilter<"Message"> | number
    from?: StringFilter<"Message"> | string
    to?: StringFilter<"Message"> | string
    body?: StringFilter<"Message"> | string
    direction?: StringFilter<"Message"> | string
    messageType?: StringFilter<"Message"> | string
    messageSid?: StringNullableFilter<"Message"> | string | null
    status?: StringNullableFilter<"Message"> | string | null
    errorMessage?: StringNullableFilter<"Message"> | string | null
    mediaUrl?: StringNullableFilter<"Message"> | string | null
    mediaType?: StringNullableFilter<"Message"> | string | null
    numMedia?: IntFilter<"Message"> | number
    patientId?: IntNullableFilter<"Message"> | number | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    body?: SortOrder
    direction?: SortOrder
    messageType?: SortOrder
    messageSid?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    mediaType?: SortOrderInput | SortOrder
    numMedia?: SortOrder
    patientId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    from?: StringFilter<"Message"> | string
    to?: StringFilter<"Message"> | string
    body?: StringFilter<"Message"> | string
    direction?: StringFilter<"Message"> | string
    messageType?: StringFilter<"Message"> | string
    messageSid?: StringNullableFilter<"Message"> | string | null
    status?: StringNullableFilter<"Message"> | string | null
    errorMessage?: StringNullableFilter<"Message"> | string | null
    mediaUrl?: StringNullableFilter<"Message"> | string | null
    mediaType?: StringNullableFilter<"Message"> | string | null
    numMedia?: IntFilter<"Message"> | number
    patientId?: IntNullableFilter<"Message"> | number | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    patient?: XOR<PatientNullableScalarRelationFilter, PatientWhereInput> | null
  }, "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    body?: SortOrder
    direction?: SortOrder
    messageType?: SortOrder
    messageSid?: SortOrderInput | SortOrder
    status?: SortOrderInput | SortOrder
    errorMessage?: SortOrderInput | SortOrder
    mediaUrl?: SortOrderInput | SortOrder
    mediaType?: SortOrderInput | SortOrder
    numMedia?: SortOrder
    patientId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Message"> | number
    from?: StringWithAggregatesFilter<"Message"> | string
    to?: StringWithAggregatesFilter<"Message"> | string
    body?: StringWithAggregatesFilter<"Message"> | string
    direction?: StringWithAggregatesFilter<"Message"> | string
    messageType?: StringWithAggregatesFilter<"Message"> | string
    messageSid?: StringNullableWithAggregatesFilter<"Message"> | string | null
    status?: StringNullableWithAggregatesFilter<"Message"> | string | null
    errorMessage?: StringNullableWithAggregatesFilter<"Message"> | string | null
    mediaUrl?: StringNullableWithAggregatesFilter<"Message"> | string | null
    mediaType?: StringNullableWithAggregatesFilter<"Message"> | string | null
    numMedia?: IntWithAggregatesFilter<"Message"> | number
    patientId?: IntNullableWithAggregatesFilter<"Message"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
  }

  export type HealthAnalysisWhereInput = {
    AND?: HealthAnalysisWhereInput | HealthAnalysisWhereInput[]
    OR?: HealthAnalysisWhereInput[]
    NOT?: HealthAnalysisWhereInput | HealthAnalysisWhereInput[]
    id?: IntFilter<"HealthAnalysis"> | number
    patientId?: IntFilter<"HealthAnalysis"> | number
    symptomsText?: StringFilter<"HealthAnalysis"> | string
    currentTemperature?: FloatNullableFilter<"HealthAnalysis"> | number | null
    riskLevel?: StringFilter<"HealthAnalysis"> | string
    riskScore?: FloatFilter<"HealthAnalysis"> | number
    confidence?: FloatFilter<"HealthAnalysis"> | number
    symptomsDetected?: JsonNullableFilter<"HealthAnalysis">
    reasoning?: JsonNullableFilter<"HealthAnalysis">
    immediateActions?: JsonNullableFilter<"HealthAnalysis">
    monitoringPattern?: StringFilter<"HealthAnalysis"> | string
    monitoringIntervals?: JsonNullableFilter<"HealthAnalysis">
    monitoringDuration?: IntFilter<"HealthAnalysis"> | number
    responseMessage?: StringFilter<"HealthAnalysis"> | string
    monitoringScheduled?: BoolFilter<"HealthAnalysis"> | boolean
    createdAt?: DateTimeFilter<"HealthAnalysis"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }

  export type HealthAnalysisOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    symptomsText?: SortOrder
    currentTemperature?: SortOrderInput | SortOrder
    riskLevel?: SortOrder
    riskScore?: SortOrder
    confidence?: SortOrder
    symptomsDetected?: SortOrderInput | SortOrder
    reasoning?: SortOrderInput | SortOrder
    immediateActions?: SortOrderInput | SortOrder
    monitoringPattern?: SortOrder
    monitoringIntervals?: SortOrderInput | SortOrder
    monitoringDuration?: SortOrder
    responseMessage?: SortOrder
    monitoringScheduled?: SortOrder
    createdAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
  }

  export type HealthAnalysisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: HealthAnalysisWhereInput | HealthAnalysisWhereInput[]
    OR?: HealthAnalysisWhereInput[]
    NOT?: HealthAnalysisWhereInput | HealthAnalysisWhereInput[]
    patientId?: IntFilter<"HealthAnalysis"> | number
    symptomsText?: StringFilter<"HealthAnalysis"> | string
    currentTemperature?: FloatNullableFilter<"HealthAnalysis"> | number | null
    riskLevel?: StringFilter<"HealthAnalysis"> | string
    riskScore?: FloatFilter<"HealthAnalysis"> | number
    confidence?: FloatFilter<"HealthAnalysis"> | number
    symptomsDetected?: JsonNullableFilter<"HealthAnalysis">
    reasoning?: JsonNullableFilter<"HealthAnalysis">
    immediateActions?: JsonNullableFilter<"HealthAnalysis">
    monitoringPattern?: StringFilter<"HealthAnalysis"> | string
    monitoringIntervals?: JsonNullableFilter<"HealthAnalysis">
    monitoringDuration?: IntFilter<"HealthAnalysis"> | number
    responseMessage?: StringFilter<"HealthAnalysis"> | string
    monitoringScheduled?: BoolFilter<"HealthAnalysis"> | boolean
    createdAt?: DateTimeFilter<"HealthAnalysis"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }, "id">

  export type HealthAnalysisOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    symptomsText?: SortOrder
    currentTemperature?: SortOrderInput | SortOrder
    riskLevel?: SortOrder
    riskScore?: SortOrder
    confidence?: SortOrder
    symptomsDetected?: SortOrderInput | SortOrder
    reasoning?: SortOrderInput | SortOrder
    immediateActions?: SortOrderInput | SortOrder
    monitoringPattern?: SortOrder
    monitoringIntervals?: SortOrderInput | SortOrder
    monitoringDuration?: SortOrder
    responseMessage?: SortOrder
    monitoringScheduled?: SortOrder
    createdAt?: SortOrder
    _count?: HealthAnalysisCountOrderByAggregateInput
    _avg?: HealthAnalysisAvgOrderByAggregateInput
    _max?: HealthAnalysisMaxOrderByAggregateInput
    _min?: HealthAnalysisMinOrderByAggregateInput
    _sum?: HealthAnalysisSumOrderByAggregateInput
  }

  export type HealthAnalysisScalarWhereWithAggregatesInput = {
    AND?: HealthAnalysisScalarWhereWithAggregatesInput | HealthAnalysisScalarWhereWithAggregatesInput[]
    OR?: HealthAnalysisScalarWhereWithAggregatesInput[]
    NOT?: HealthAnalysisScalarWhereWithAggregatesInput | HealthAnalysisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"HealthAnalysis"> | number
    patientId?: IntWithAggregatesFilter<"HealthAnalysis"> | number
    symptomsText?: StringWithAggregatesFilter<"HealthAnalysis"> | string
    currentTemperature?: FloatNullableWithAggregatesFilter<"HealthAnalysis"> | number | null
    riskLevel?: StringWithAggregatesFilter<"HealthAnalysis"> | string
    riskScore?: FloatWithAggregatesFilter<"HealthAnalysis"> | number
    confidence?: FloatWithAggregatesFilter<"HealthAnalysis"> | number
    symptomsDetected?: JsonNullableWithAggregatesFilter<"HealthAnalysis">
    reasoning?: JsonNullableWithAggregatesFilter<"HealthAnalysis">
    immediateActions?: JsonNullableWithAggregatesFilter<"HealthAnalysis">
    monitoringPattern?: StringWithAggregatesFilter<"HealthAnalysis"> | string
    monitoringIntervals?: JsonNullableWithAggregatesFilter<"HealthAnalysis">
    monitoringDuration?: IntWithAggregatesFilter<"HealthAnalysis"> | number
    responseMessage?: StringWithAggregatesFilter<"HealthAnalysis"> | string
    monitoringScheduled?: BoolWithAggregatesFilter<"HealthAnalysis"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"HealthAnalysis"> | Date | string
  }

  export type MonitoringJobWhereInput = {
    AND?: MonitoringJobWhereInput | MonitoringJobWhereInput[]
    OR?: MonitoringJobWhereInput[]
    NOT?: MonitoringJobWhereInput | MonitoringJobWhereInput[]
    id?: IntFilter<"MonitoringJob"> | number
    patientId?: IntFilter<"MonitoringJob"> | number
    jobType?: StringFilter<"MonitoringJob"> | string
    jobId?: StringFilter<"MonitoringJob"> | string
    riskLevel?: StringNullableFilter<"MonitoringJob"> | string | null
    checkNumber?: IntNullableFilter<"MonitoringJob"> | number | null
    totalChecks?: IntNullableFilter<"MonitoringJob"> | number | null
    status?: StringFilter<"MonitoringJob"> | string
    scheduledFor?: DateTimeFilter<"MonitoringJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"MonitoringJob"> | Date | string | null
    createdAt?: DateTimeFilter<"MonitoringJob"> | Date | string
    updatedAt?: DateTimeFilter<"MonitoringJob"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }

  export type MonitoringJobOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    jobType?: SortOrder
    jobId?: SortOrder
    riskLevel?: SortOrderInput | SortOrder
    checkNumber?: SortOrderInput | SortOrder
    totalChecks?: SortOrderInput | SortOrder
    status?: SortOrder
    scheduledFor?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
  }

  export type MonitoringJobWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    jobId?: string
    AND?: MonitoringJobWhereInput | MonitoringJobWhereInput[]
    OR?: MonitoringJobWhereInput[]
    NOT?: MonitoringJobWhereInput | MonitoringJobWhereInput[]
    patientId?: IntFilter<"MonitoringJob"> | number
    jobType?: StringFilter<"MonitoringJob"> | string
    riskLevel?: StringNullableFilter<"MonitoringJob"> | string | null
    checkNumber?: IntNullableFilter<"MonitoringJob"> | number | null
    totalChecks?: IntNullableFilter<"MonitoringJob"> | number | null
    status?: StringFilter<"MonitoringJob"> | string
    scheduledFor?: DateTimeFilter<"MonitoringJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"MonitoringJob"> | Date | string | null
    createdAt?: DateTimeFilter<"MonitoringJob"> | Date | string
    updatedAt?: DateTimeFilter<"MonitoringJob"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
  }, "id" | "jobId">

  export type MonitoringJobOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    jobType?: SortOrder
    jobId?: SortOrder
    riskLevel?: SortOrderInput | SortOrder
    checkNumber?: SortOrderInput | SortOrder
    totalChecks?: SortOrderInput | SortOrder
    status?: SortOrder
    scheduledFor?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MonitoringJobCountOrderByAggregateInput
    _avg?: MonitoringJobAvgOrderByAggregateInput
    _max?: MonitoringJobMaxOrderByAggregateInput
    _min?: MonitoringJobMinOrderByAggregateInput
    _sum?: MonitoringJobSumOrderByAggregateInput
  }

  export type MonitoringJobScalarWhereWithAggregatesInput = {
    AND?: MonitoringJobScalarWhereWithAggregatesInput | MonitoringJobScalarWhereWithAggregatesInput[]
    OR?: MonitoringJobScalarWhereWithAggregatesInput[]
    NOT?: MonitoringJobScalarWhereWithAggregatesInput | MonitoringJobScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MonitoringJob"> | number
    patientId?: IntWithAggregatesFilter<"MonitoringJob"> | number
    jobType?: StringWithAggregatesFilter<"MonitoringJob"> | string
    jobId?: StringWithAggregatesFilter<"MonitoringJob"> | string
    riskLevel?: StringNullableWithAggregatesFilter<"MonitoringJob"> | string | null
    checkNumber?: IntNullableWithAggregatesFilter<"MonitoringJob"> | number | null
    totalChecks?: IntNullableWithAggregatesFilter<"MonitoringJob"> | number | null
    status?: StringWithAggregatesFilter<"MonitoringJob"> | string
    scheduledFor?: DateTimeWithAggregatesFilter<"MonitoringJob"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"MonitoringJob"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MonitoringJob"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MonitoringJob"> | Date | string
  }

  export type PatientCreateInput = {
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: Date | string | null
    familyContactName?: string | null
    familyContactPhone?: string | null
    familyContactRelation?: string | null
    familyContactConsent?: boolean
    healthcareProviderName?: string | null
    healthcareProviderHospital?: string | null
    healthcareProviderPhone?: string | null
    healthcareProviderConsent?: boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: string | null
    dialysisSchedule?: string | null
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: string
    riskLevel?: string
    monitoringEnabled?: boolean
    preferredLanguage?: string
    registrationComplete?: boolean
    lastHealthCheck?: Date | string | null
    lastRiskLevel?: string | null
    lastUrgency?: string | null
    lastEscalationLevel?: string | null
    lastMonitoringInterval?: number | null
    lastSymptomText?: string | null
    lastAnalysisTimestamp?: Date | string | null
    lastWeatherTemp?: number | null
    lastWeatherHumidity?: number | null
    confidenceScore?: number | null
    emergencyAlerted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutPatientInput
    healthAnalyses?: HealthAnalysisCreateNestedManyWithoutPatientInput
    monitoringJobs?: MonitoringJobCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: number
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: Date | string | null
    familyContactName?: string | null
    familyContactPhone?: string | null
    familyContactRelation?: string | null
    familyContactConsent?: boolean
    healthcareProviderName?: string | null
    healthcareProviderHospital?: string | null
    healthcareProviderPhone?: string | null
    healthcareProviderConsent?: boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: string | null
    dialysisSchedule?: string | null
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: string
    riskLevel?: string
    monitoringEnabled?: boolean
    preferredLanguage?: string
    registrationComplete?: boolean
    lastHealthCheck?: Date | string | null
    lastRiskLevel?: string | null
    lastUrgency?: string | null
    lastEscalationLevel?: string | null
    lastMonitoringInterval?: number | null
    lastSymptomText?: string | null
    lastAnalysisTimestamp?: Date | string | null
    lastWeatherTemp?: number | null
    lastWeatherHumidity?: number | null
    confidenceScore?: number | null
    emergencyAlerted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutPatientInput
    healthAnalyses?: HealthAnalysisUncheckedCreateNestedManyWithoutPatientInput
    monitoringJobs?: MonitoringJobUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutPatientNestedInput
    healthAnalyses?: HealthAnalysisUpdateManyWithoutPatientNestedInput
    monitoringJobs?: MonitoringJobUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutPatientNestedInput
    healthAnalyses?: HealthAnalysisUncheckedUpdateManyWithoutPatientNestedInput
    monitoringJobs?: MonitoringJobUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: number
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: Date | string | null
    familyContactName?: string | null
    familyContactPhone?: string | null
    familyContactRelation?: string | null
    familyContactConsent?: boolean
    healthcareProviderName?: string | null
    healthcareProviderHospital?: string | null
    healthcareProviderPhone?: string | null
    healthcareProviderConsent?: boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: string | null
    dialysisSchedule?: string | null
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: string
    riskLevel?: string
    monitoringEnabled?: boolean
    preferredLanguage?: string
    registrationComplete?: boolean
    lastHealthCheck?: Date | string | null
    lastRiskLevel?: string | null
    lastUrgency?: string | null
    lastEscalationLevel?: string | null
    lastMonitoringInterval?: number | null
    lastSymptomText?: string | null
    lastAnalysisTimestamp?: Date | string | null
    lastWeatherTemp?: number | null
    lastWeatherHumidity?: number | null
    confidenceScore?: number | null
    emergencyAlerted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    from: string
    to: string
    body: string
    direction: string
    messageType?: string
    messageSid?: string | null
    status?: string | null
    errorMessage?: string | null
    mediaUrl?: string | null
    mediaType?: string | null
    numMedia?: number
    createdAt?: Date | string
    patient?: PatientCreateNestedOneWithoutMessagesInput
  }

  export type MessageUncheckedCreateInput = {
    id?: number
    from: string
    to: string
    body: string
    direction: string
    messageType?: string
    messageSid?: string | null
    status?: string | null
    errorMessage?: string | null
    mediaUrl?: string | null
    mediaType?: string | null
    numMedia?: number
    patientId?: number | null
    createdAt?: Date | string
  }

  export type MessageUpdateInput = {
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    messageSid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    numMedia?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneWithoutMessagesNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    messageSid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    numMedia?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateManyInput = {
    id?: number
    from: string
    to: string
    body: string
    direction: string
    messageType?: string
    messageSid?: string | null
    status?: string | null
    errorMessage?: string | null
    mediaUrl?: string | null
    mediaType?: string | null
    numMedia?: number
    patientId?: number | null
    createdAt?: Date | string
  }

  export type MessageUpdateManyMutationInput = {
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    messageSid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    numMedia?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    messageSid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    numMedia?: IntFieldUpdateOperationsInput | number
    patientId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthAnalysisCreateInput = {
    symptomsText: string
    currentTemperature?: number | null
    riskLevel: string
    riskScore: number
    confidence: number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern: string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration: number
    responseMessage: string
    monitoringScheduled?: boolean
    createdAt?: Date | string
    patient: PatientCreateNestedOneWithoutHealthAnalysesInput
  }

  export type HealthAnalysisUncheckedCreateInput = {
    id?: number
    patientId: number
    symptomsText: string
    currentTemperature?: number | null
    riskLevel: string
    riskScore: number
    confidence: number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern: string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration: number
    responseMessage: string
    monitoringScheduled?: boolean
    createdAt?: Date | string
  }

  export type HealthAnalysisUpdateInput = {
    symptomsText?: StringFieldUpdateOperationsInput | string
    currentTemperature?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern?: StringFieldUpdateOperationsInput | string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration?: IntFieldUpdateOperationsInput | number
    responseMessage?: StringFieldUpdateOperationsInput | string
    monitoringScheduled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutHealthAnalysesNestedInput
  }

  export type HealthAnalysisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    symptomsText?: StringFieldUpdateOperationsInput | string
    currentTemperature?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern?: StringFieldUpdateOperationsInput | string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration?: IntFieldUpdateOperationsInput | number
    responseMessage?: StringFieldUpdateOperationsInput | string
    monitoringScheduled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthAnalysisCreateManyInput = {
    id?: number
    patientId: number
    symptomsText: string
    currentTemperature?: number | null
    riskLevel: string
    riskScore: number
    confidence: number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern: string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration: number
    responseMessage: string
    monitoringScheduled?: boolean
    createdAt?: Date | string
  }

  export type HealthAnalysisUpdateManyMutationInput = {
    symptomsText?: StringFieldUpdateOperationsInput | string
    currentTemperature?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern?: StringFieldUpdateOperationsInput | string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration?: IntFieldUpdateOperationsInput | number
    responseMessage?: StringFieldUpdateOperationsInput | string
    monitoringScheduled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthAnalysisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    symptomsText?: StringFieldUpdateOperationsInput | string
    currentTemperature?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern?: StringFieldUpdateOperationsInput | string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration?: IntFieldUpdateOperationsInput | number
    responseMessage?: StringFieldUpdateOperationsInput | string
    monitoringScheduled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MonitoringJobCreateInput = {
    jobType: string
    jobId: string
    riskLevel?: string | null
    checkNumber?: number | null
    totalChecks?: number | null
    status?: string
    scheduledFor: Date | string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutMonitoringJobsInput
  }

  export type MonitoringJobUncheckedCreateInput = {
    id?: number
    patientId: number
    jobType: string
    jobId: string
    riskLevel?: string | null
    checkNumber?: number | null
    totalChecks?: number | null
    status?: string
    scheduledFor: Date | string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MonitoringJobUpdateInput = {
    jobType?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    checkNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalChecks?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutMonitoringJobsNestedInput
  }

  export type MonitoringJobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    jobType?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    checkNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalChecks?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MonitoringJobCreateManyInput = {
    id?: number
    patientId: number
    jobType: string
    jobId: string
    riskLevel?: string | null
    checkNumber?: number | null
    totalChecks?: number | null
    status?: string
    scheduledFor: Date | string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MonitoringJobUpdateManyMutationInput = {
    jobType?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    checkNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalChecks?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MonitoringJobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    jobType?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    checkNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalChecks?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type HealthAnalysisListRelationFilter = {
    every?: HealthAnalysisWhereInput
    some?: HealthAnalysisWhereInput
    none?: HealthAnalysisWhereInput
  }

  export type MonitoringJobListRelationFilter = {
    every?: MonitoringJobWhereInput
    some?: MonitoringJobWhereInput
    none?: MonitoringJobWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HealthAnalysisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MonitoringJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    phoneNumber?: SortOrder
    zipcode?: SortOrder
    age?: SortOrder
    optOutCustomMessages?: SortOrder
    consentGiven?: SortOrder
    consentDate?: SortOrder
    familyContactName?: SortOrder
    familyContactPhone?: SortOrder
    familyContactRelation?: SortOrder
    familyContactConsent?: SortOrder
    healthcareProviderName?: SortOrder
    healthcareProviderHospital?: SortOrder
    healthcareProviderPhone?: SortOrder
    healthcareProviderConsent?: SortOrder
    medications?: SortOrder
    preExistingConditions?: SortOrder
    chronicConditions?: SortOrder
    hospital?: SortOrder
    dialysisSchedule?: SortOrder
    smoker?: SortOrder
    isPregnant?: SortOrder
    activityLevel?: SortOrder
    riskLevel?: SortOrder
    monitoringEnabled?: SortOrder
    preferredLanguage?: SortOrder
    registrationComplete?: SortOrder
    lastHealthCheck?: SortOrder
    lastRiskLevel?: SortOrder
    lastUrgency?: SortOrder
    lastEscalationLevel?: SortOrder
    lastMonitoringInterval?: SortOrder
    lastSymptomText?: SortOrder
    lastAnalysisTimestamp?: SortOrder
    lastWeatherTemp?: SortOrder
    lastWeatherHumidity?: SortOrder
    confidenceScore?: SortOrder
    emergencyAlerted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    lastMonitoringInterval?: SortOrder
    lastWeatherTemp?: SortOrder
    lastWeatherHumidity?: SortOrder
    confidenceScore?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    phoneNumber?: SortOrder
    zipcode?: SortOrder
    age?: SortOrder
    optOutCustomMessages?: SortOrder
    consentGiven?: SortOrder
    consentDate?: SortOrder
    familyContactName?: SortOrder
    familyContactPhone?: SortOrder
    familyContactRelation?: SortOrder
    familyContactConsent?: SortOrder
    healthcareProviderName?: SortOrder
    healthcareProviderHospital?: SortOrder
    healthcareProviderPhone?: SortOrder
    healthcareProviderConsent?: SortOrder
    hospital?: SortOrder
    dialysisSchedule?: SortOrder
    smoker?: SortOrder
    isPregnant?: SortOrder
    activityLevel?: SortOrder
    riskLevel?: SortOrder
    monitoringEnabled?: SortOrder
    preferredLanguage?: SortOrder
    registrationComplete?: SortOrder
    lastHealthCheck?: SortOrder
    lastRiskLevel?: SortOrder
    lastUrgency?: SortOrder
    lastEscalationLevel?: SortOrder
    lastMonitoringInterval?: SortOrder
    lastSymptomText?: SortOrder
    lastAnalysisTimestamp?: SortOrder
    lastWeatherTemp?: SortOrder
    lastWeatherHumidity?: SortOrder
    confidenceScore?: SortOrder
    emergencyAlerted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    phoneNumber?: SortOrder
    zipcode?: SortOrder
    age?: SortOrder
    optOutCustomMessages?: SortOrder
    consentGiven?: SortOrder
    consentDate?: SortOrder
    familyContactName?: SortOrder
    familyContactPhone?: SortOrder
    familyContactRelation?: SortOrder
    familyContactConsent?: SortOrder
    healthcareProviderName?: SortOrder
    healthcareProviderHospital?: SortOrder
    healthcareProviderPhone?: SortOrder
    healthcareProviderConsent?: SortOrder
    hospital?: SortOrder
    dialysisSchedule?: SortOrder
    smoker?: SortOrder
    isPregnant?: SortOrder
    activityLevel?: SortOrder
    riskLevel?: SortOrder
    monitoringEnabled?: SortOrder
    preferredLanguage?: SortOrder
    registrationComplete?: SortOrder
    lastHealthCheck?: SortOrder
    lastRiskLevel?: SortOrder
    lastUrgency?: SortOrder
    lastEscalationLevel?: SortOrder
    lastMonitoringInterval?: SortOrder
    lastSymptomText?: SortOrder
    lastAnalysisTimestamp?: SortOrder
    lastWeatherTemp?: SortOrder
    lastWeatherHumidity?: SortOrder
    confidenceScore?: SortOrder
    emergencyAlerted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
    lastMonitoringInterval?: SortOrder
    lastWeatherTemp?: SortOrder
    lastWeatherHumidity?: SortOrder
    confidenceScore?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PatientNullableScalarRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    body?: SortOrder
    direction?: SortOrder
    messageType?: SortOrder
    messageSid?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    mediaUrl?: SortOrder
    mediaType?: SortOrder
    numMedia?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    id?: SortOrder
    numMedia?: SortOrder
    patientId?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    body?: SortOrder
    direction?: SortOrder
    messageType?: SortOrder
    messageSid?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    mediaUrl?: SortOrder
    mediaType?: SortOrder
    numMedia?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    body?: SortOrder
    direction?: SortOrder
    messageType?: SortOrder
    messageSid?: SortOrder
    status?: SortOrder
    errorMessage?: SortOrder
    mediaUrl?: SortOrder
    mediaType?: SortOrder
    numMedia?: SortOrder
    patientId?: SortOrder
    createdAt?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    id?: SortOrder
    numMedia?: SortOrder
    patientId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PatientScalarRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type HealthAnalysisCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    symptomsText?: SortOrder
    currentTemperature?: SortOrder
    riskLevel?: SortOrder
    riskScore?: SortOrder
    confidence?: SortOrder
    symptomsDetected?: SortOrder
    reasoning?: SortOrder
    immediateActions?: SortOrder
    monitoringPattern?: SortOrder
    monitoringIntervals?: SortOrder
    monitoringDuration?: SortOrder
    responseMessage?: SortOrder
    monitoringScheduled?: SortOrder
    createdAt?: SortOrder
  }

  export type HealthAnalysisAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    currentTemperature?: SortOrder
    riskScore?: SortOrder
    confidence?: SortOrder
    monitoringDuration?: SortOrder
  }

  export type HealthAnalysisMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    symptomsText?: SortOrder
    currentTemperature?: SortOrder
    riskLevel?: SortOrder
    riskScore?: SortOrder
    confidence?: SortOrder
    monitoringPattern?: SortOrder
    monitoringDuration?: SortOrder
    responseMessage?: SortOrder
    monitoringScheduled?: SortOrder
    createdAt?: SortOrder
  }

  export type HealthAnalysisMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    symptomsText?: SortOrder
    currentTemperature?: SortOrder
    riskLevel?: SortOrder
    riskScore?: SortOrder
    confidence?: SortOrder
    monitoringPattern?: SortOrder
    monitoringDuration?: SortOrder
    responseMessage?: SortOrder
    monitoringScheduled?: SortOrder
    createdAt?: SortOrder
  }

  export type HealthAnalysisSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    currentTemperature?: SortOrder
    riskScore?: SortOrder
    confidence?: SortOrder
    monitoringDuration?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type MonitoringJobCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    jobType?: SortOrder
    jobId?: SortOrder
    riskLevel?: SortOrder
    checkNumber?: SortOrder
    totalChecks?: SortOrder
    status?: SortOrder
    scheduledFor?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MonitoringJobAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    checkNumber?: SortOrder
    totalChecks?: SortOrder
  }

  export type MonitoringJobMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    jobType?: SortOrder
    jobId?: SortOrder
    riskLevel?: SortOrder
    checkNumber?: SortOrder
    totalChecks?: SortOrder
    status?: SortOrder
    scheduledFor?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MonitoringJobMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    jobType?: SortOrder
    jobId?: SortOrder
    riskLevel?: SortOrder
    checkNumber?: SortOrder
    totalChecks?: SortOrder
    status?: SortOrder
    scheduledFor?: SortOrder
    completedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MonitoringJobSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    checkNumber?: SortOrder
    totalChecks?: SortOrder
  }

  export type MessageCreateNestedManyWithoutPatientInput = {
    create?: XOR<MessageCreateWithoutPatientInput, MessageUncheckedCreateWithoutPatientInput> | MessageCreateWithoutPatientInput[] | MessageUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPatientInput | MessageCreateOrConnectWithoutPatientInput[]
    createMany?: MessageCreateManyPatientInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type HealthAnalysisCreateNestedManyWithoutPatientInput = {
    create?: XOR<HealthAnalysisCreateWithoutPatientInput, HealthAnalysisUncheckedCreateWithoutPatientInput> | HealthAnalysisCreateWithoutPatientInput[] | HealthAnalysisUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: HealthAnalysisCreateOrConnectWithoutPatientInput | HealthAnalysisCreateOrConnectWithoutPatientInput[]
    createMany?: HealthAnalysisCreateManyPatientInputEnvelope
    connect?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
  }

  export type MonitoringJobCreateNestedManyWithoutPatientInput = {
    create?: XOR<MonitoringJobCreateWithoutPatientInput, MonitoringJobUncheckedCreateWithoutPatientInput> | MonitoringJobCreateWithoutPatientInput[] | MonitoringJobUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MonitoringJobCreateOrConnectWithoutPatientInput | MonitoringJobCreateOrConnectWithoutPatientInput[]
    createMany?: MonitoringJobCreateManyPatientInputEnvelope
    connect?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MessageCreateWithoutPatientInput, MessageUncheckedCreateWithoutPatientInput> | MessageCreateWithoutPatientInput[] | MessageUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPatientInput | MessageCreateOrConnectWithoutPatientInput[]
    createMany?: MessageCreateManyPatientInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type HealthAnalysisUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<HealthAnalysisCreateWithoutPatientInput, HealthAnalysisUncheckedCreateWithoutPatientInput> | HealthAnalysisCreateWithoutPatientInput[] | HealthAnalysisUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: HealthAnalysisCreateOrConnectWithoutPatientInput | HealthAnalysisCreateOrConnectWithoutPatientInput[]
    createMany?: HealthAnalysisCreateManyPatientInputEnvelope
    connect?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
  }

  export type MonitoringJobUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MonitoringJobCreateWithoutPatientInput, MonitoringJobUncheckedCreateWithoutPatientInput> | MonitoringJobCreateWithoutPatientInput[] | MonitoringJobUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MonitoringJobCreateOrConnectWithoutPatientInput | MonitoringJobCreateOrConnectWithoutPatientInput[]
    createMany?: MonitoringJobCreateManyPatientInputEnvelope
    connect?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MessageUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MessageCreateWithoutPatientInput, MessageUncheckedCreateWithoutPatientInput> | MessageCreateWithoutPatientInput[] | MessageUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPatientInput | MessageCreateOrConnectWithoutPatientInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutPatientInput | MessageUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MessageCreateManyPatientInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutPatientInput | MessageUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutPatientInput | MessageUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type HealthAnalysisUpdateManyWithoutPatientNestedInput = {
    create?: XOR<HealthAnalysisCreateWithoutPatientInput, HealthAnalysisUncheckedCreateWithoutPatientInput> | HealthAnalysisCreateWithoutPatientInput[] | HealthAnalysisUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: HealthAnalysisCreateOrConnectWithoutPatientInput | HealthAnalysisCreateOrConnectWithoutPatientInput[]
    upsert?: HealthAnalysisUpsertWithWhereUniqueWithoutPatientInput | HealthAnalysisUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: HealthAnalysisCreateManyPatientInputEnvelope
    set?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
    disconnect?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
    delete?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
    connect?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
    update?: HealthAnalysisUpdateWithWhereUniqueWithoutPatientInput | HealthAnalysisUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: HealthAnalysisUpdateManyWithWhereWithoutPatientInput | HealthAnalysisUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: HealthAnalysisScalarWhereInput | HealthAnalysisScalarWhereInput[]
  }

  export type MonitoringJobUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MonitoringJobCreateWithoutPatientInput, MonitoringJobUncheckedCreateWithoutPatientInput> | MonitoringJobCreateWithoutPatientInput[] | MonitoringJobUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MonitoringJobCreateOrConnectWithoutPatientInput | MonitoringJobCreateOrConnectWithoutPatientInput[]
    upsert?: MonitoringJobUpsertWithWhereUniqueWithoutPatientInput | MonitoringJobUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MonitoringJobCreateManyPatientInputEnvelope
    set?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
    disconnect?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
    delete?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
    connect?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
    update?: MonitoringJobUpdateWithWhereUniqueWithoutPatientInput | MonitoringJobUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MonitoringJobUpdateManyWithWhereWithoutPatientInput | MonitoringJobUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MonitoringJobScalarWhereInput | MonitoringJobScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MessageCreateWithoutPatientInput, MessageUncheckedCreateWithoutPatientInput> | MessageCreateWithoutPatientInput[] | MessageUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutPatientInput | MessageCreateOrConnectWithoutPatientInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutPatientInput | MessageUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MessageCreateManyPatientInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutPatientInput | MessageUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutPatientInput | MessageUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type HealthAnalysisUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<HealthAnalysisCreateWithoutPatientInput, HealthAnalysisUncheckedCreateWithoutPatientInput> | HealthAnalysisCreateWithoutPatientInput[] | HealthAnalysisUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: HealthAnalysisCreateOrConnectWithoutPatientInput | HealthAnalysisCreateOrConnectWithoutPatientInput[]
    upsert?: HealthAnalysisUpsertWithWhereUniqueWithoutPatientInput | HealthAnalysisUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: HealthAnalysisCreateManyPatientInputEnvelope
    set?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
    disconnect?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
    delete?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
    connect?: HealthAnalysisWhereUniqueInput | HealthAnalysisWhereUniqueInput[]
    update?: HealthAnalysisUpdateWithWhereUniqueWithoutPatientInput | HealthAnalysisUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: HealthAnalysisUpdateManyWithWhereWithoutPatientInput | HealthAnalysisUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: HealthAnalysisScalarWhereInput | HealthAnalysisScalarWhereInput[]
  }

  export type MonitoringJobUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MonitoringJobCreateWithoutPatientInput, MonitoringJobUncheckedCreateWithoutPatientInput> | MonitoringJobCreateWithoutPatientInput[] | MonitoringJobUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MonitoringJobCreateOrConnectWithoutPatientInput | MonitoringJobCreateOrConnectWithoutPatientInput[]
    upsert?: MonitoringJobUpsertWithWhereUniqueWithoutPatientInput | MonitoringJobUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MonitoringJobCreateManyPatientInputEnvelope
    set?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
    disconnect?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
    delete?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
    connect?: MonitoringJobWhereUniqueInput | MonitoringJobWhereUniqueInput[]
    update?: MonitoringJobUpdateWithWhereUniqueWithoutPatientInput | MonitoringJobUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MonitoringJobUpdateManyWithWhereWithoutPatientInput | MonitoringJobUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MonitoringJobScalarWhereInput | MonitoringJobScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutMessagesInput = {
    create?: XOR<PatientCreateWithoutMessagesInput, PatientUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMessagesInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientUpdateOneWithoutMessagesNestedInput = {
    create?: XOR<PatientCreateWithoutMessagesInput, PatientUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMessagesInput
    upsert?: PatientUpsertWithoutMessagesInput
    disconnect?: PatientWhereInput | boolean
    delete?: PatientWhereInput | boolean
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMessagesInput, PatientUpdateWithoutMessagesInput>, PatientUncheckedUpdateWithoutMessagesInput>
  }

  export type PatientCreateNestedOneWithoutHealthAnalysesInput = {
    create?: XOR<PatientCreateWithoutHealthAnalysesInput, PatientUncheckedCreateWithoutHealthAnalysesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutHealthAnalysesInput
    connect?: PatientWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatientUpdateOneRequiredWithoutHealthAnalysesNestedInput = {
    create?: XOR<PatientCreateWithoutHealthAnalysesInput, PatientUncheckedCreateWithoutHealthAnalysesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutHealthAnalysesInput
    upsert?: PatientUpsertWithoutHealthAnalysesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutHealthAnalysesInput, PatientUpdateWithoutHealthAnalysesInput>, PatientUncheckedUpdateWithoutHealthAnalysesInput>
  }

  export type PatientCreateNestedOneWithoutMonitoringJobsInput = {
    create?: XOR<PatientCreateWithoutMonitoringJobsInput, PatientUncheckedCreateWithoutMonitoringJobsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMonitoringJobsInput
    connect?: PatientWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutMonitoringJobsNestedInput = {
    create?: XOR<PatientCreateWithoutMonitoringJobsInput, PatientUncheckedCreateWithoutMonitoringJobsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMonitoringJobsInput
    upsert?: PatientUpsertWithoutMonitoringJobsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutMonitoringJobsInput, PatientUpdateWithoutMonitoringJobsInput>, PatientUncheckedUpdateWithoutMonitoringJobsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type MessageCreateWithoutPatientInput = {
    from: string
    to: string
    body: string
    direction: string
    messageType?: string
    messageSid?: string | null
    status?: string | null
    errorMessage?: string | null
    mediaUrl?: string | null
    mediaType?: string | null
    numMedia?: number
    createdAt?: Date | string
  }

  export type MessageUncheckedCreateWithoutPatientInput = {
    id?: number
    from: string
    to: string
    body: string
    direction: string
    messageType?: string
    messageSid?: string | null
    status?: string | null
    errorMessage?: string | null
    mediaUrl?: string | null
    mediaType?: string | null
    numMedia?: number
    createdAt?: Date | string
  }

  export type MessageCreateOrConnectWithoutPatientInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutPatientInput, MessageUncheckedCreateWithoutPatientInput>
  }

  export type MessageCreateManyPatientInputEnvelope = {
    data: MessageCreateManyPatientInput | MessageCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type HealthAnalysisCreateWithoutPatientInput = {
    symptomsText: string
    currentTemperature?: number | null
    riskLevel: string
    riskScore: number
    confidence: number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern: string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration: number
    responseMessage: string
    monitoringScheduled?: boolean
    createdAt?: Date | string
  }

  export type HealthAnalysisUncheckedCreateWithoutPatientInput = {
    id?: number
    symptomsText: string
    currentTemperature?: number | null
    riskLevel: string
    riskScore: number
    confidence: number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern: string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration: number
    responseMessage: string
    monitoringScheduled?: boolean
    createdAt?: Date | string
  }

  export type HealthAnalysisCreateOrConnectWithoutPatientInput = {
    where: HealthAnalysisWhereUniqueInput
    create: XOR<HealthAnalysisCreateWithoutPatientInput, HealthAnalysisUncheckedCreateWithoutPatientInput>
  }

  export type HealthAnalysisCreateManyPatientInputEnvelope = {
    data: HealthAnalysisCreateManyPatientInput | HealthAnalysisCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type MonitoringJobCreateWithoutPatientInput = {
    jobType: string
    jobId: string
    riskLevel?: string | null
    checkNumber?: number | null
    totalChecks?: number | null
    status?: string
    scheduledFor: Date | string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MonitoringJobUncheckedCreateWithoutPatientInput = {
    id?: number
    jobType: string
    jobId: string
    riskLevel?: string | null
    checkNumber?: number | null
    totalChecks?: number | null
    status?: string
    scheduledFor: Date | string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MonitoringJobCreateOrConnectWithoutPatientInput = {
    where: MonitoringJobWhereUniqueInput
    create: XOR<MonitoringJobCreateWithoutPatientInput, MonitoringJobUncheckedCreateWithoutPatientInput>
  }

  export type MonitoringJobCreateManyPatientInputEnvelope = {
    data: MonitoringJobCreateManyPatientInput | MonitoringJobCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutPatientInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutPatientInput, MessageUncheckedUpdateWithoutPatientInput>
    create: XOR<MessageCreateWithoutPatientInput, MessageUncheckedCreateWithoutPatientInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutPatientInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutPatientInput, MessageUncheckedUpdateWithoutPatientInput>
  }

  export type MessageUpdateManyWithWhereWithoutPatientInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutPatientInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: IntFilter<"Message"> | number
    from?: StringFilter<"Message"> | string
    to?: StringFilter<"Message"> | string
    body?: StringFilter<"Message"> | string
    direction?: StringFilter<"Message"> | string
    messageType?: StringFilter<"Message"> | string
    messageSid?: StringNullableFilter<"Message"> | string | null
    status?: StringNullableFilter<"Message"> | string | null
    errorMessage?: StringNullableFilter<"Message"> | string | null
    mediaUrl?: StringNullableFilter<"Message"> | string | null
    mediaType?: StringNullableFilter<"Message"> | string | null
    numMedia?: IntFilter<"Message"> | number
    patientId?: IntNullableFilter<"Message"> | number | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
  }

  export type HealthAnalysisUpsertWithWhereUniqueWithoutPatientInput = {
    where: HealthAnalysisWhereUniqueInput
    update: XOR<HealthAnalysisUpdateWithoutPatientInput, HealthAnalysisUncheckedUpdateWithoutPatientInput>
    create: XOR<HealthAnalysisCreateWithoutPatientInput, HealthAnalysisUncheckedCreateWithoutPatientInput>
  }

  export type HealthAnalysisUpdateWithWhereUniqueWithoutPatientInput = {
    where: HealthAnalysisWhereUniqueInput
    data: XOR<HealthAnalysisUpdateWithoutPatientInput, HealthAnalysisUncheckedUpdateWithoutPatientInput>
  }

  export type HealthAnalysisUpdateManyWithWhereWithoutPatientInput = {
    where: HealthAnalysisScalarWhereInput
    data: XOR<HealthAnalysisUpdateManyMutationInput, HealthAnalysisUncheckedUpdateManyWithoutPatientInput>
  }

  export type HealthAnalysisScalarWhereInput = {
    AND?: HealthAnalysisScalarWhereInput | HealthAnalysisScalarWhereInput[]
    OR?: HealthAnalysisScalarWhereInput[]
    NOT?: HealthAnalysisScalarWhereInput | HealthAnalysisScalarWhereInput[]
    id?: IntFilter<"HealthAnalysis"> | number
    patientId?: IntFilter<"HealthAnalysis"> | number
    symptomsText?: StringFilter<"HealthAnalysis"> | string
    currentTemperature?: FloatNullableFilter<"HealthAnalysis"> | number | null
    riskLevel?: StringFilter<"HealthAnalysis"> | string
    riskScore?: FloatFilter<"HealthAnalysis"> | number
    confidence?: FloatFilter<"HealthAnalysis"> | number
    symptomsDetected?: JsonNullableFilter<"HealthAnalysis">
    reasoning?: JsonNullableFilter<"HealthAnalysis">
    immediateActions?: JsonNullableFilter<"HealthAnalysis">
    monitoringPattern?: StringFilter<"HealthAnalysis"> | string
    monitoringIntervals?: JsonNullableFilter<"HealthAnalysis">
    monitoringDuration?: IntFilter<"HealthAnalysis"> | number
    responseMessage?: StringFilter<"HealthAnalysis"> | string
    monitoringScheduled?: BoolFilter<"HealthAnalysis"> | boolean
    createdAt?: DateTimeFilter<"HealthAnalysis"> | Date | string
  }

  export type MonitoringJobUpsertWithWhereUniqueWithoutPatientInput = {
    where: MonitoringJobWhereUniqueInput
    update: XOR<MonitoringJobUpdateWithoutPatientInput, MonitoringJobUncheckedUpdateWithoutPatientInput>
    create: XOR<MonitoringJobCreateWithoutPatientInput, MonitoringJobUncheckedCreateWithoutPatientInput>
  }

  export type MonitoringJobUpdateWithWhereUniqueWithoutPatientInput = {
    where: MonitoringJobWhereUniqueInput
    data: XOR<MonitoringJobUpdateWithoutPatientInput, MonitoringJobUncheckedUpdateWithoutPatientInput>
  }

  export type MonitoringJobUpdateManyWithWhereWithoutPatientInput = {
    where: MonitoringJobScalarWhereInput
    data: XOR<MonitoringJobUpdateManyMutationInput, MonitoringJobUncheckedUpdateManyWithoutPatientInput>
  }

  export type MonitoringJobScalarWhereInput = {
    AND?: MonitoringJobScalarWhereInput | MonitoringJobScalarWhereInput[]
    OR?: MonitoringJobScalarWhereInput[]
    NOT?: MonitoringJobScalarWhereInput | MonitoringJobScalarWhereInput[]
    id?: IntFilter<"MonitoringJob"> | number
    patientId?: IntFilter<"MonitoringJob"> | number
    jobType?: StringFilter<"MonitoringJob"> | string
    jobId?: StringFilter<"MonitoringJob"> | string
    riskLevel?: StringNullableFilter<"MonitoringJob"> | string | null
    checkNumber?: IntNullableFilter<"MonitoringJob"> | number | null
    totalChecks?: IntNullableFilter<"MonitoringJob"> | number | null
    status?: StringFilter<"MonitoringJob"> | string
    scheduledFor?: DateTimeFilter<"MonitoringJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"MonitoringJob"> | Date | string | null
    createdAt?: DateTimeFilter<"MonitoringJob"> | Date | string
    updatedAt?: DateTimeFilter<"MonitoringJob"> | Date | string
  }

  export type PatientCreateWithoutMessagesInput = {
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: Date | string | null
    familyContactName?: string | null
    familyContactPhone?: string | null
    familyContactRelation?: string | null
    familyContactConsent?: boolean
    healthcareProviderName?: string | null
    healthcareProviderHospital?: string | null
    healthcareProviderPhone?: string | null
    healthcareProviderConsent?: boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: string | null
    dialysisSchedule?: string | null
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: string
    riskLevel?: string
    monitoringEnabled?: boolean
    preferredLanguage?: string
    registrationComplete?: boolean
    lastHealthCheck?: Date | string | null
    lastRiskLevel?: string | null
    lastUrgency?: string | null
    lastEscalationLevel?: string | null
    lastMonitoringInterval?: number | null
    lastSymptomText?: string | null
    lastAnalysisTimestamp?: Date | string | null
    lastWeatherTemp?: number | null
    lastWeatherHumidity?: number | null
    confidenceScore?: number | null
    emergencyAlerted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    healthAnalyses?: HealthAnalysisCreateNestedManyWithoutPatientInput
    monitoringJobs?: MonitoringJobCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMessagesInput = {
    id?: number
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: Date | string | null
    familyContactName?: string | null
    familyContactPhone?: string | null
    familyContactRelation?: string | null
    familyContactConsent?: boolean
    healthcareProviderName?: string | null
    healthcareProviderHospital?: string | null
    healthcareProviderPhone?: string | null
    healthcareProviderConsent?: boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: string | null
    dialysisSchedule?: string | null
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: string
    riskLevel?: string
    monitoringEnabled?: boolean
    preferredLanguage?: string
    registrationComplete?: boolean
    lastHealthCheck?: Date | string | null
    lastRiskLevel?: string | null
    lastUrgency?: string | null
    lastEscalationLevel?: string | null
    lastMonitoringInterval?: number | null
    lastSymptomText?: string | null
    lastAnalysisTimestamp?: Date | string | null
    lastWeatherTemp?: number | null
    lastWeatherHumidity?: number | null
    confidenceScore?: number | null
    emergencyAlerted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    healthAnalyses?: HealthAnalysisUncheckedCreateNestedManyWithoutPatientInput
    monitoringJobs?: MonitoringJobUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMessagesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMessagesInput, PatientUncheckedCreateWithoutMessagesInput>
  }

  export type PatientUpsertWithoutMessagesInput = {
    update: XOR<PatientUpdateWithoutMessagesInput, PatientUncheckedUpdateWithoutMessagesInput>
    create: XOR<PatientCreateWithoutMessagesInput, PatientUncheckedCreateWithoutMessagesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutMessagesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutMessagesInput, PatientUncheckedUpdateWithoutMessagesInput>
  }

  export type PatientUpdateWithoutMessagesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    healthAnalyses?: HealthAnalysisUpdateManyWithoutPatientNestedInput
    monitoringJobs?: MonitoringJobUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    healthAnalyses?: HealthAnalysisUncheckedUpdateManyWithoutPatientNestedInput
    monitoringJobs?: MonitoringJobUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateWithoutHealthAnalysesInput = {
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: Date | string | null
    familyContactName?: string | null
    familyContactPhone?: string | null
    familyContactRelation?: string | null
    familyContactConsent?: boolean
    healthcareProviderName?: string | null
    healthcareProviderHospital?: string | null
    healthcareProviderPhone?: string | null
    healthcareProviderConsent?: boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: string | null
    dialysisSchedule?: string | null
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: string
    riskLevel?: string
    monitoringEnabled?: boolean
    preferredLanguage?: string
    registrationComplete?: boolean
    lastHealthCheck?: Date | string | null
    lastRiskLevel?: string | null
    lastUrgency?: string | null
    lastEscalationLevel?: string | null
    lastMonitoringInterval?: number | null
    lastSymptomText?: string | null
    lastAnalysisTimestamp?: Date | string | null
    lastWeatherTemp?: number | null
    lastWeatherHumidity?: number | null
    confidenceScore?: number | null
    emergencyAlerted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutPatientInput
    monitoringJobs?: MonitoringJobCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutHealthAnalysesInput = {
    id?: number
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: Date | string | null
    familyContactName?: string | null
    familyContactPhone?: string | null
    familyContactRelation?: string | null
    familyContactConsent?: boolean
    healthcareProviderName?: string | null
    healthcareProviderHospital?: string | null
    healthcareProviderPhone?: string | null
    healthcareProviderConsent?: boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: string | null
    dialysisSchedule?: string | null
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: string
    riskLevel?: string
    monitoringEnabled?: boolean
    preferredLanguage?: string
    registrationComplete?: boolean
    lastHealthCheck?: Date | string | null
    lastRiskLevel?: string | null
    lastUrgency?: string | null
    lastEscalationLevel?: string | null
    lastMonitoringInterval?: number | null
    lastSymptomText?: string | null
    lastAnalysisTimestamp?: Date | string | null
    lastWeatherTemp?: number | null
    lastWeatherHumidity?: number | null
    confidenceScore?: number | null
    emergencyAlerted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutPatientInput
    monitoringJobs?: MonitoringJobUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutHealthAnalysesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutHealthAnalysesInput, PatientUncheckedCreateWithoutHealthAnalysesInput>
  }

  export type PatientUpsertWithoutHealthAnalysesInput = {
    update: XOR<PatientUpdateWithoutHealthAnalysesInput, PatientUncheckedUpdateWithoutHealthAnalysesInput>
    create: XOR<PatientCreateWithoutHealthAnalysesInput, PatientUncheckedCreateWithoutHealthAnalysesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutHealthAnalysesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutHealthAnalysesInput, PatientUncheckedUpdateWithoutHealthAnalysesInput>
  }

  export type PatientUpdateWithoutHealthAnalysesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutPatientNestedInput
    monitoringJobs?: MonitoringJobUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutHealthAnalysesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutPatientNestedInput
    monitoringJobs?: MonitoringJobUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateWithoutMonitoringJobsInput = {
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: Date | string | null
    familyContactName?: string | null
    familyContactPhone?: string | null
    familyContactRelation?: string | null
    familyContactConsent?: boolean
    healthcareProviderName?: string | null
    healthcareProviderHospital?: string | null
    healthcareProviderPhone?: string | null
    healthcareProviderConsent?: boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: string | null
    dialysisSchedule?: string | null
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: string
    riskLevel?: string
    monitoringEnabled?: boolean
    preferredLanguage?: string
    registrationComplete?: boolean
    lastHealthCheck?: Date | string | null
    lastRiskLevel?: string | null
    lastUrgency?: string | null
    lastEscalationLevel?: string | null
    lastMonitoringInterval?: number | null
    lastSymptomText?: string | null
    lastAnalysisTimestamp?: Date | string | null
    lastWeatherTemp?: number | null
    lastWeatherHumidity?: number | null
    confidenceScore?: number | null
    emergencyAlerted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageCreateNestedManyWithoutPatientInput
    healthAnalyses?: HealthAnalysisCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMonitoringJobsInput = {
    id?: number
    firstName: string
    phoneNumber: string
    zipcode: string
    age: number
    optOutCustomMessages?: boolean
    consentGiven?: boolean
    consentDate?: Date | string | null
    familyContactName?: string | null
    familyContactPhone?: string | null
    familyContactRelation?: string | null
    familyContactConsent?: boolean
    healthcareProviderName?: string | null
    healthcareProviderHospital?: string | null
    healthcareProviderPhone?: string | null
    healthcareProviderConsent?: boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: string | null
    dialysisSchedule?: string | null
    smoker?: boolean
    isPregnant?: boolean
    activityLevel?: string
    riskLevel?: string
    monitoringEnabled?: boolean
    preferredLanguage?: string
    registrationComplete?: boolean
    lastHealthCheck?: Date | string | null
    lastRiskLevel?: string | null
    lastUrgency?: string | null
    lastEscalationLevel?: string | null
    lastMonitoringInterval?: number | null
    lastSymptomText?: string | null
    lastAnalysisTimestamp?: Date | string | null
    lastWeatherTemp?: number | null
    lastWeatherHumidity?: number | null
    confidenceScore?: number | null
    emergencyAlerted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: MessageUncheckedCreateNestedManyWithoutPatientInput
    healthAnalyses?: HealthAnalysisUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMonitoringJobsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMonitoringJobsInput, PatientUncheckedCreateWithoutMonitoringJobsInput>
  }

  export type PatientUpsertWithoutMonitoringJobsInput = {
    update: XOR<PatientUpdateWithoutMonitoringJobsInput, PatientUncheckedUpdateWithoutMonitoringJobsInput>
    create: XOR<PatientCreateWithoutMonitoringJobsInput, PatientUncheckedCreateWithoutMonitoringJobsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutMonitoringJobsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutMonitoringJobsInput, PatientUncheckedUpdateWithoutMonitoringJobsInput>
  }

  export type PatientUpdateWithoutMonitoringJobsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUpdateManyWithoutPatientNestedInput
    healthAnalyses?: HealthAnalysisUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMonitoringJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    optOutCustomMessages?: BoolFieldUpdateOperationsInput | boolean
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    familyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactRelation?: NullableStringFieldUpdateOperationsInput | string | null
    familyContactConsent?: BoolFieldUpdateOperationsInput | boolean
    healthcareProviderName?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderHospital?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderPhone?: NullableStringFieldUpdateOperationsInput | string | null
    healthcareProviderConsent?: BoolFieldUpdateOperationsInput | boolean
    medications?: NullableJsonNullValueInput | InputJsonValue
    preExistingConditions?: NullableJsonNullValueInput | InputJsonValue
    chronicConditions?: NullableJsonNullValueInput | InputJsonValue
    hospital?: NullableStringFieldUpdateOperationsInput | string | null
    dialysisSchedule?: NullableStringFieldUpdateOperationsInput | string | null
    smoker?: BoolFieldUpdateOperationsInput | boolean
    isPregnant?: BoolFieldUpdateOperationsInput | boolean
    activityLevel?: StringFieldUpdateOperationsInput | string
    riskLevel?: StringFieldUpdateOperationsInput | string
    monitoringEnabled?: BoolFieldUpdateOperationsInput | boolean
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    registrationComplete?: BoolFieldUpdateOperationsInput | boolean
    lastHealthCheck?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastRiskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastUrgency?: NullableStringFieldUpdateOperationsInput | string | null
    lastEscalationLevel?: NullableStringFieldUpdateOperationsInput | string | null
    lastMonitoringInterval?: NullableIntFieldUpdateOperationsInput | number | null
    lastSymptomText?: NullableStringFieldUpdateOperationsInput | string | null
    lastAnalysisTimestamp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastWeatherTemp?: NullableFloatFieldUpdateOperationsInput | number | null
    lastWeatherHumidity?: NullableFloatFieldUpdateOperationsInput | number | null
    confidenceScore?: NullableFloatFieldUpdateOperationsInput | number | null
    emergencyAlerted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: MessageUncheckedUpdateManyWithoutPatientNestedInput
    healthAnalyses?: HealthAnalysisUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type MessageCreateManyPatientInput = {
    id?: number
    from: string
    to: string
    body: string
    direction: string
    messageType?: string
    messageSid?: string | null
    status?: string | null
    errorMessage?: string | null
    mediaUrl?: string | null
    mediaType?: string | null
    numMedia?: number
    createdAt?: Date | string
  }

  export type HealthAnalysisCreateManyPatientInput = {
    id?: number
    symptomsText: string
    currentTemperature?: number | null
    riskLevel: string
    riskScore: number
    confidence: number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern: string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration: number
    responseMessage: string
    monitoringScheduled?: boolean
    createdAt?: Date | string
  }

  export type MonitoringJobCreateManyPatientInput = {
    id?: number
    jobType: string
    jobId: string
    riskLevel?: string | null
    checkNumber?: number | null
    totalChecks?: number | null
    status?: string
    scheduledFor: Date | string
    completedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MessageUpdateWithoutPatientInput = {
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    messageSid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    numMedia?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    messageSid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    numMedia?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    from?: StringFieldUpdateOperationsInput | string
    to?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    direction?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    messageSid?: NullableStringFieldUpdateOperationsInput | string | null
    status?: NullableStringFieldUpdateOperationsInput | string | null
    errorMessage?: NullableStringFieldUpdateOperationsInput | string | null
    mediaUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mediaType?: NullableStringFieldUpdateOperationsInput | string | null
    numMedia?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthAnalysisUpdateWithoutPatientInput = {
    symptomsText?: StringFieldUpdateOperationsInput | string
    currentTemperature?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern?: StringFieldUpdateOperationsInput | string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration?: IntFieldUpdateOperationsInput | number
    responseMessage?: StringFieldUpdateOperationsInput | string
    monitoringScheduled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthAnalysisUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    symptomsText?: StringFieldUpdateOperationsInput | string
    currentTemperature?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern?: StringFieldUpdateOperationsInput | string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration?: IntFieldUpdateOperationsInput | number
    responseMessage?: StringFieldUpdateOperationsInput | string
    monitoringScheduled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HealthAnalysisUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    symptomsText?: StringFieldUpdateOperationsInput | string
    currentTemperature?: NullableFloatFieldUpdateOperationsInput | number | null
    riskLevel?: StringFieldUpdateOperationsInput | string
    riskScore?: FloatFieldUpdateOperationsInput | number
    confidence?: FloatFieldUpdateOperationsInput | number
    symptomsDetected?: NullableJsonNullValueInput | InputJsonValue
    reasoning?: NullableJsonNullValueInput | InputJsonValue
    immediateActions?: NullableJsonNullValueInput | InputJsonValue
    monitoringPattern?: StringFieldUpdateOperationsInput | string
    monitoringIntervals?: NullableJsonNullValueInput | InputJsonValue
    monitoringDuration?: IntFieldUpdateOperationsInput | number
    responseMessage?: StringFieldUpdateOperationsInput | string
    monitoringScheduled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MonitoringJobUpdateWithoutPatientInput = {
    jobType?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    checkNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalChecks?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MonitoringJobUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobType?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    checkNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalChecks?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MonitoringJobUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobType?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    riskLevel?: NullableStringFieldUpdateOperationsInput | string | null
    checkNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalChecks?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}